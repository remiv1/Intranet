"""
This type stub file was generated by pyright.
"""

import datetime
import pathlib
import typing
from borb.pdf.license.version import Version

"""
A class to represent and manage software licenses.

This class provides functionality to verify, retrieve, and manage the state of a software license.
"""
class License:
    """
    A class to represent and manage software licenses.

    This class provides functionality to verify, retrieve, and manage the state of a software license.
    """
    __BORB_PUBLIC_KEYS: typing.List[bytes] = ...
    __COMPANY: typing.Optional[str] = ...
    __NAME: typing.Optional[str] = ...
    __MAX_VERSION: typing.Optional[Version] = ...
    __MIN_DATE: typing.Optional[datetime.datetime] = ...
    __MAX_DATE: typing.Optional[datetime.datetime] = ...
    @staticmethod
    def create_license(company: str, license_path: typing.Union[str, pathlib.Path], max_date: datetime.datetime, max_version: Version, min_date: datetime.datetime, name: str, private_key_path: typing.Union[str, pathlib.Path]): # -> None:
        """
        Create a new software license with the provided parameters.

        :param company: str - The name of the company for which the license is being created.
        :param license_path: typing.Union[str, pathlib.Path] - The file path where the license file will be saved.
        :param max_date: datetime.datetime - The maximum expiration date for the license.
        :param max_version: Version - The maximum software version this license applies to.
        :param min_date: datetime.datetime - The minimum start date for the license validity.
        :param name: str - The name of the individual or organization the license is issued to.
        :param private_key_path: typing.Union[str, pathlib.Path] - The file path to the private key used to sign the license.
        :return: None
        """
        ...
    
    @staticmethod
    def get_company() -> typing.Optional[str]:
        """
        Retrieve the company associated with the registered license.

        :return: The name (of the company), or None if the license is not registered.
        """
        ...
    
    @staticmethod
    def get_max_date() -> typing.Optional[datetime.datetime]:
        """
        Retrieve the (max) date until which the license is valid.

        :return: The (max) date, or None if the license is not registered.
        """
        ...
    
    @staticmethod
    def get_max_version() -> typing.Optional[Version]:
        """
        Retrieve the (max) version of the software that the license is valid for.

        :return: The version object, or None if the license is not registered.
        """
        ...
    
    @staticmethod
    def get_min_date() -> typing.Optional[datetime.datetime]:
        """
        Retrieve the (min) date from which the license is valid.

        :return: The (min) date, or None if the license is not registered.
        """
        ...
    
    @staticmethod
    def get_name() -> typing.Optional[str]:
        """
        Retrieve the name of the individual associated with the registered license.

        :return: The name (of the person), or None if the license is not registered.
        """
        ...
    
    @staticmethod
    def register(where_from: typing.Union[str, pathlib.Path]) -> bool:
        """
        Register an entity based on the specified source location.

        :param where_from:  The source location from which to register.
                            Can be a string representing a file path or a `pathlib.Path` object.
        :return: True if the registration is successful, False otherwise.
        """
        ...
    


if __name__ == "__main__":
    ...
