"""
This type stub file was generated by pyright.
"""

"""
A class to represent and compare software version numbers using semantic versioning.

Version numbers are expected in the format `major.minor.patch` (e.g., "1.2.3").
"""
class Version:
    """
    A class to represent and compare software version numbers using semantic versioning.

    Version numbers are expected in the format `major.minor.patch` (e.g., "1.2.3").
    """
    def __init__(self, s: str) -> None:
        """
        Initialize a `Version` instance by parsing a version string.

        :param s: str - The version string in the format `major.minor.patch`.
        """
        ...
    
    def __eq__(self, other) -> bool:
        """
        Check if this version is equal to another version.

        :param other: Version - The other `Version` object to compare against.
        :return: bool - True if both versions are equal, False otherwise.
        """
        ...
    
    def __ge__(self, other) -> bool:
        """
        Determine if this version is greater than or equal to another version.

        :param other: Version - The other `Version` object to compare against.
        :return: bool - True if this version is greater than or equal to the other, False otherwise.
        """
        ...
    
    def __gt__(self, other) -> bool:
        """
        Determine if this version is greater than another version.

        :param other: Version - The other `Version` object to compare against.
        :return: bool - True if this version is greater than the other, False otherwise.
        :raises AssertionError: If the `other` is not a `Version` instance.
        """
        ...
    
    def __le__(self, other) -> bool:
        """
        Determine if this version is less than or equal to another version.

        :param other: Version - The other `Version` object to compare against.
        :return: bool - True if this version is less than or equal to the other, False otherwise.
        """
        ...
    
    def __lt__(self, other) -> bool:
        """
        Determine if this version is less than another version.

        :param other: Version - The other `Version` object to compare against.
        :return: bool - True if this version is less than the other, False otherwise.
        :raises AssertionError: If the `other` is not a `Version` instance.
        """
        ...
    
    def __ne__(self, other) -> bool:
        """
        Check if this version is not equal to another version.

        :param other: Version - The other `Version` object to compare against.
        :return: bool - True if both versions are not equal, False otherwise.
        """
        ...
    
    def __repr__(self): # -> str:
        """
        Return a string representation of the version.

        :return: str - The version string in the format `major.minor.patch`.
        """
        ...
    
    @staticmethod
    def get_current_version() -> Version:
        """
        Retrieve the current version of the application.

        :return: Version - A `Version` object representing the current version.
        """
        ...
    


