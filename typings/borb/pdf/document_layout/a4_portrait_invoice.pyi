"""
This type stub file was generated by pyright.
"""

import datetime
import pathlib
import typing
from borb.pdf.color.color import Color
from borb.pdf.document_layout.document_layout import DocumentLayout
from borb.pdf.layout_element.image.image import Image

"""
Represent an invoice in A4 portrait format.

The `A4PortraitInvoice` class enables users to create and customize an invoice in A4 portrait layout.
It provides methods to set various invoice properties, including the company's address, billing and
shipping addresses, line items, taxes, discounts, and payment terms.
"""
class A4PortraitInvoice(DocumentLayout):
    """
    Represent an invoice in A4 portrait format.

    The `A4PortraitInvoice` class enables users to create and customize an invoice in A4 portrait layout.
    It provides methods to set various invoice properties, including the company's address, billing and
    shipping addresses, line items, taxes, discounts, and payment terms.
    """
    __LIGHT_GRAY: Color = ...
    def __init__(self) -> None:
        """
        Initialize a new instance of the A4PortraitInvoice class.

        This constructor sets up the initial state of the invoice object, initializing attributes that will
        hold the various components of the invoice, including company and customer information, line items,
        tax and discount values, and other relevant details.
        """
        ...
    
    def append_item(self, amount: float, description: str, quantity: int, unit_price: float) -> A4PortraitInvoice:
        """
        Append an item to the invoice.

        This method allows the user to add a line item to the invoice, which includes the item's total amount,
        description, quantity, and unit price. The item will be included in the invoice when it is generated.

        :param amount:      The total amount for the line item, calculated as quantity multiplied by unit price.
        :param description: A brief description of the item being invoiced.
        :param quantity:    The quantity of the item being billed.
        :param unit_price:  The price per unit of the item.
        :return:            The updated invoice object, allowing for method chaining.
        """
        ...
    
    def save(self, path: str) -> A4PortraitInvoice:
        """
        Save the invoice to a specified file path.

        This method writes the current invoice document to the given file path.
        The document will be saved in the PDF format. If the file already exists,
        it may be overwritten.

        :param path:    The file path where the invoice will be saved.
        :return:        Self, allowing for method chaining.
        """
        ...
    
    def set_address(self, address_line_1: str, address_line_2: str, address_line_3: str, address_line_4: str, address_line_5: str) -> A4PortraitInvoice:
        """
        Set the user's company address for the invoice.

        This method allows the user to specify the company address that will be displayed
        on the invoice. The address is composed of up to five address lines.

        :param address_line_1:  The first line of the company address (typically the company name or primary identifier).
        :param address_line_2:  The second line of the company address (e.g., street address or P.O. Box).
        :param address_line_3:  The third line of the company address (e.g., city, state/province).
        :param address_line_4:  The fourth line of the company address (e.g., postal/ZIP code).
        :param address_line_5:  The fifth line of the company address (e.g., country).
        :return:                The updated invoice object, allowing for method chaining.
        """
        ...
    
    def set_bill_to(self, address_line_1: str, address_line_2: str, address_line_3: str, address_line_4: str, address_line_5: str) -> A4PortraitInvoice:
        """
        Set the 'Bill To' address for the invoice.

        This method allows the user to specify the billing address that will be displayed on the invoice,
        typically representing  the recipient or customer being billed.
        The address is composed of up to five address lines.

        :param address_line_1:  The first line of the billing address (typically the recipient's name or company name).
        :param address_line_2:  The second line of the billing address (e.g., street address or P.O. Box).
        :param address_line_3:  The third line of the billing address (e.g., city, state/province).
        :param address_line_4:  The fourth line of the billing address (e.g., postal/ZIP code).
        :param address_line_5:  The fifth line of the billing address (e.g., country).
        :return:                The updated in voice object, allowing for method chaining.
        """
        ...
    
    def set_currency_abbreviation(self, currency_abbreviation: str) -> A4PortraitInvoice:
        """
        Set the currency abbreviation for the invoice.

        This method allows the user to specify the currency abbreviation that will be displayed on the invoice.
        This is typically a three-letter code representing the currency (e.g., "USD" for United States Dollar,
        "EUR" for Euro).

        :param currency_abbreviation:   The currency abbreviation, represented as a string.
        :return:                        The updated invoice object, allowing for method chaining.
        """
        ...
    
    def set_date(self, date: datetime.datetime) -> A4PortraitInvoice:
        """
        Set the date for the invoice.

        This method allows the user to specify the date that will be displayed on the invoice.
        The date should be provided as a `datetime.datetime` object.

        :param date:    The date to set for the invoice, represented as a `datetime.datetime` object.
        :return:        The updated invoice object, allowing for method chaining.
        """
        ...
    
    def set_discounts(self, discounts: float) -> A4PortraitInvoice:
        """
        Set the discount amount for the invoice.

        This method allows the user to specify the total discount to be applied to the invoice.
        The discount should be provided as a floating-point number, representing a flat amount.

        :param discounts:   The discount amount to apply to the invoice, represented as a float.
        :return:            The updated invoice object, allowing for method chaining.
        """
        ...
    
    def set_due_date(self, due_date: datetime.datetime) -> A4PortraitInvoice:
        """
        Set the due date for the invoice.

        This method allows the user to specify the due date that will be displayed on the invoice.
        The due date should be provided as a `datetime.datetime` object.

        :param due_date:    The due date to set for the invoice, represented as a `datetime.datetime` object.
        :return:            The updated invoice object, allowing for method chaining.
        """
        ...
    
    def set_invoice_nr(self, invoice_nr: str) -> A4PortraitInvoice:
        """
        Set the invoice number.

        This method allows the user to specify a unique invoice number that will be displayed on the invoice.
        The invoice number is typically used for tracking and reference purposes.

        :param invoice_nr:  The unique invoice number, represented as a string.
        :return:            The updated invoice object, allowing for method chaining.
        """
        ...
    
    def set_logo(self, bytes_path_pil_image_or_url: typing.Union[bytes, pathlib.Path, PIL.Image.Image, str]) -> A4PortraitInvoice:
        """
        Set the logo for the invoice.

        This method allows the user to specify the logo that will be displayed on the invoice. The logo can be provided
        in various formats, including raw image bytes, a file path, a Pillow (PIL) Image object, or a URL.

        :param bytes_path_pil_image_or_url: The logo image to set. It can be provided in one of the following formats:
            - `bytes`: The raw byte content of the image.
            - `pathlib.Path`: The path to the image file.
            - `PIL.Image.Image`: A Pillow image object.
            - `str`: A URL pointing to the image.
        :return: The updated invoice object, allowing for method chaining.
        """
        ...
    
    def set_ship_to(self, address_line_1: str, address_line_2: str, address_line_3: str, address_line_4: str, address_line_5: str) -> A4PortraitInvoice:
        """
        Set the 'Ship To' address for the invoice.

        This method allows the user to specify the shipping address that will be displayed on the invoice,
        representing the location where the goods or services are to be delivered.
        The address is composed of up to five address lines.

        :param address_line_1:  The first line of the shipping address (typically the recipient's name or company name).
        :param address_line_2:  The second line of the shipping address (e.g., street address or P.O. Box).
        :param address_line_3:  The third line of the shipping address (e.g., city, state/province).
        :param address_line_4:  The fourth line of the shipping address (e.g., postal/ZIP code).
        :param address_line_5:  The fifth line of the shipping address (e.g., country).
        :return:                The updated invoice object, allowing for method chaining.
        """
        ...
    
    def set_subtotal(self, subtotal: float) -> A4PortraitInvoice:
        """
        Set the subtotal amount for the invoice.

        This method allows the user to specify the subtotal for the invoice,
        which is the total amount before any taxes or discounts are applied.
        The subtotal should be provided as a floating-point number.

        :param subtotal:    The subtotal amount for the invoice, represented as a float.
        :return:            The updated invoice object, allowing for method chaining.
        """
        ...
    
    def set_taxes(self, taxes: float) -> A4PortraitInvoice:
        """
        Set the tax amount for the invoice.

        This method allows the user to specify the total tax to be applied to the invoice.
        The tax should be provided as a floating-point number,
        representing the total tax amount calculated based on the subtotal and any applicable tax rates.

        :param taxes:   The tax amount to apply to the invoice, represented as a float.
        :return:        The updated invoice object, allowing for method chaining.
        """
        ...
    
    def set_terms_and_conditions(self, terms_and_conditions: str) -> A4PortraitInvoice:
        """
        Set the terms and conditions for the invoice.

        This method allows the user to specify the terms and conditions that will be displayed on the invoice.
        This may include payment terms, refund policies, or any other relevant conditions that the recipient
        should be aware of. The terms and conditions should be provided as a string.

        :param terms_and_conditions:    The terms and conditions to display on the invoice, represented as a string.
        :return:                        The updated invoice object, allowing for method chaining.
        """
        ...
    
    def set_total(self, total: float) -> A4PortraitInvoice:
        """
        Set the total amount for the invoice.

        This method allows the user to specify the total amount for the invoice, which includes the subtotal,
        taxes, and any applicable discounts. The total should be provided as a floating-point number.

        :param total:   The total amount for the invoice, represented as a float.
        :return:        The updated invoice object, allowing for method chaining.
        """
        ...
    


