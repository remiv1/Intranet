"""
This type stub file was generated by pyright.
"""

"""
Represents a font object in a PDF document.

The `Font` class serves as a superclass for various font-related classes,
encapsulating properties and behaviors common to all fonts used in PDF documents.
This class provides a foundation for defining font attributes such as name, size,
style, and encoding, which are essential for rendering text correctly in a PDF.
"""
class Font(dict):
    """
    Represents a font object in a PDF document.

    The `Font` class serves as a superclass for various font-related classes,
    encapsulating properties and behaviors common to all fonts used in PDF documents.
    This class provides a foundation for defining font attributes such as name, size,
    style, and encoding, which are essential for rendering text correctly in a PDF.
    """
    def __init__(self) -> None:
        """
        Initialize a new `Font` object for representing a font in a PDF document.

        This constructor initializes the font properties by creating an empty dictionary
        that can hold various attributes related to the font. The `Font` class serves as a
        base for defining more specific font types and settings, allowing for easy extension
        and customization of font-related functionalities.

        This class does not take any parameters and relies on the dictionary structure
        to store font attributes such as name, size, style, and encoding, which are essential
        for rendering text correctly in a PDF.

        Usage of this constructor allows for the creation of font objects that can be
        populated with specific font attributes later.
        """
        ...
    
    def get_character(self, character_code: int) -> str:
        """
        Retrieve the character corresponding to a given character code in a Simple Font.

        This method resolves the character associated with a character code using the following
        prioritized sources of encoding information:
        1. `/ToUnicode` CMap: A mapping that explicitly defines the Unicode value for character codes.
        2. `/Encoding` (with `/Differences`): The font's base encoding, modified by the `/Differences`
           array, if specified. This step is used if no `/ToUnicode` mapping exists.

        By following this prioritized order, the method ensures accurate decoding of character codes
        based on the font's defined encoding mechanisms.

        :param character_code: The character code to resolve (an integer value).
        :return: The Unicode character corresponding to the given character code.
        :raises KeyError: If the character code cannot be resolved using the available encoding information.
        """
        ...
    
    def get_character_code(self, character: str) -> int:
        """
        Retrieve the character code corresponding to a given Unicode character in a Simple Font.

        This method resolves the character code associated with a Unicode character using the following
        prioritized sources of encoding information:
        1. `/ToUnicode` CMap: If a reverse mapping is defined in the `/ToUnicode` CMap, it is used to
           identify the character code.
        2. `/Encoding` (with `/Differences`): If no `/ToUnicode` mapping exists, the method checks the
           base encoding and the `/Differences` array for the character code.

        This method allows for encoding text into the font's character encoding scheme, ensuring compatibility
        with the font's defined mappings.

        :param character: The Unicode character to resolve (a single-character string).
        :return: The character code corresponding to the given Unicode character.
        :raises KeyError: If the Unicode character cannot be resolved using the available encoding information.
        """
        ...
    
    def get_unicode(self, character_id: int) -> str:
        """
        Retrieve the Unicode representation of a character based on its character ID.

        This method should be implemented in subclasses to provide the mapping from a
        character ID (specific to the font encoding) to its corresponding Unicode character.
        By default, this method raises an `AssertionError`, indicating it is not implemented.

        :param character_id:    The character ID to map to a Unicode character.
        :return:                The Unicode character as a string.
        """
        ...
    
    def get_width(self, text: str, character_spacing: float = ..., font_size: float = ..., word_spacing: float = ...) -> int:
        """
        Return the total width of a text string when rendered with the font at a specific size.

        This function calculates the width of the given text string when rendered with the font
        at the specified font size.

        :param font_size:           The font size to be used for rendering.
        :param text:                The text string to calculate the width for.
        :param word_spacing:        The word spacing to be used for rendering
        :param character_spacing:   The character spacing to be used for rendering
        :return:                    The width (in points) of the text in the specified font size.
        """
        ...
    


