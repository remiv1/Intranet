"""
This type stub file was generated by pyright.
"""

import enum
import typing
from borb.pdf.color.color import Color
from borb.pdf.page import Page

"""
Base class for various types of layout elements.

This class serves as a foundation for layout elements such as text, images, tables, and lists.
A layout element can calculate its size based on available space and render itself on a page.
"""
class LayoutElement:
    """
    Base class for various types of layout elements.

    This class serves as a foundation for layout elements such as text, images, tables, and lists.
    A layout element can calculate its size based on available space and render itself on a page.
    """
    class HorizontalAlignment(enum.Enum):
        """Enum for specifying horizontal alignment options."""
        LEFT = ...
        MIDDLE = ...
        RIGHT = ...
    
    
    class TextAlignment(enum.Enum):
        """Enum for specifying text alignment options."""
        CENTERED = ...
        JUSTIFIED = ...
        LEFT = ...
        RIGHT = ...
    
    
    class VerticalAlignment(enum.Enum):
        """Enum for specifying vertical alignment options."""
        BOTTOM = ...
        MIDDLE = ...
        TOP = ...
    
    
    def __init__(self, background_color: typing.Optional[Color] = ..., border_color: typing.Optional[Color] = ..., border_dash_pattern: typing.List[int] = ..., border_dash_phase: int = ..., border_width_bottom: int = ..., border_width_left: int = ..., border_width_right: int = ..., border_width_top: int = ..., horizontal_alignment: HorizontalAlignment = ..., margin_bottom: int = ..., margin_left: int = ..., margin_right: int = ..., margin_top: int = ..., padding_bottom: int = ..., padding_left: int = ..., padding_right: int = ..., padding_top: int = ..., vertical_alignment: VerticalAlignment = ...) -> None:
        """
        Initialize a new `LayoutElement` object that serves as a base class for all layout elements in a PDF.

        This constructor provides fundamental layout properties that can be customized for all
        derived elements, such as background color, border styles, margins, and padding.
        These properties dictate the visual appearance and positioning of layout elements within
        the PDF, allowing for a flexible and structured layout.

        :param background_color:        Optional background color for the layout element.
        :param border_color:            Optional border color for the layout element.
        :param border_dash_pattern:     Dash pattern used for the border lines of the element.
        :param border_dash_phase:       Phase offset for the dash pattern in the borders.
        :param border_width_bottom:     Width of the bottom border of the element.
        :param border_width_left:       Width of the left border of the element.
        :param border_width_right:      Width of the right border of the element.
        :param border_width_top:        Width of the top border of the element.
        :param horizontal_alignment:     Horizontal alignment of the element (default is LEFT).
        :param margin_bottom:           Space between the element and the element below it.
        :param margin_left:             Space between the element and the left page margin.
        :param margin_right:            Space between the element and the right page margin.
        :param margin_top:              Space between the element and the element above it.
        :param padding_bottom:          Padding inside the element at the bottom.
        :param padding_left:            Padding inside the element on the left side.
        :param padding_right:           Padding inside the element on the right side.
        :param padding_top:             Padding inside the element at the top.
        :param vertical_alignment:       Vertical alignment of the element (default is TOP).
        """
        ...
    
    def get_background_color(self) -> typing.Optional[Color]:
        """
        Return the background color of this LayoutElement.

        This function returns the background color of this LayoutElement, or None if no color is set.

        :return: The background color of this LayoutElement, or None if no color is set.
        """
        ...
    
    def get_border_color(self) -> typing.Optional[Color]:
        """
        Get the border color of the layout element.

        This method returns the color used for the border of the layout element.
        If no border color has been set, it returns None.

        :return: An optional Color object representing the border color, or None if no color is set.
        """
        ...
    
    def get_border_dash_pattern(self) -> typing.List[int]:
        """
        Get the dash pattern for the border of the layout element.

        This method returns a list of integers that define the dash pattern of the border.
        The dash pattern is represented as a sequence of lengths, where even-indexed values
        represent the lengths of the dashes and odd-indexed values represent the lengths of the gaps
        between the dashes. If no dash pattern has been set, the default pattern will be returned.

        :return: A list of integers representing the dash pattern for the border.
        """
        ...
    
    def get_border_dash_phase(self) -> int:
        """
        Get the dash phase of the border dash pattern.

        This method retrieves the phase offset for the dash pattern of the border. The phase
        specifies the starting point of the dash pattern, allowing for adjustments in the positioning
        of the dashes and gaps. If no dash phase has been set, it will return the default value.

        :return: An integer representing the dash phase for the border dash pattern.
        """
        ...
    
    def get_border_width_bottom(self) -> int:
        """
        Get the width of the bottom border of the layout element.

        This method returns the width of the border at the bottom of the layout element.
        The width is specified in units relevant to the document's layout.

        :return: An integer representing the width of the bottom border in document units.
        """
        ...
    
    def get_border_width_left(self) -> int:
        """
        Get the width of the left border of the layout element.

        This method retrieves the width of the border on the left side of the layout element.
        The width is measured in units relevant to the document's layout.

        :return: An integer representing the width of the left border in document units.
        """
        ...
    
    def get_border_width_right(self) -> int:
        """
        Get the width of the right border of the layout element.

        This method returns the width of the border on the right side of the layout element.
        The width is specified in units that correspond to the document's layout.

        :return: An integer representing the width of the right border in document units.
        """
        ...
    
    def get_border_width_top(self) -> int:
        """
        Get the width of the top border of the layout element.

        This method retrieves the width of the border at the top of the layout element.
        The width is measured in units that are relevant to the document's layout.

        :return: An integer representing the width of the top border in document units.
        """
        ...
    
    def get_horizontal_alignment(self) -> HorizontalAlignment:
        """
        Return the horizontal alignment of this LayoutElement.

        This function returns the horizontal alignment setting for this LayoutElement.

        :return: The horizontal alignment of this LayoutElement.
        """
        ...
    
    def get_margin_bottom(self) -> int:
        """
        Return the bottom margin of this LayoutElement.

        This function returns the value of the bottom margin for this LayoutElement.

        :return: The bottom margin of this LayoutElement as an integer.
        """
        ...
    
    def get_margin_left(self) -> int:
        """
        Return the left margin of this LayoutElement.

        This function returns the value of the left margin for this LayoutElement.

        :return: The left margin of this LayoutElement as an integer.
        """
        ...
    
    def get_margin_right(self) -> int:
        """
        Return the right margin of this LayoutElement.

        This function returns the value of the right margin for this LayoutElement.

        :return: The right margin of this LayoutElement as an integer.
        """
        ...
    
    def get_margin_top(self) -> int:
        """
        Return the top margin of this LayoutElement.

        This function returns the value of the top margin for this LayoutElement.

        :return: The top margin of this LayoutElement as an integer.
        """
        ...
    
    def get_padding_bottom(self) -> int:
        """
        Return the bottom padding of this LayoutElement.

        This function returns the value of the bottom padding for this LayoutElement.

        :return: The bottom padding of this LayoutElement as an integer.
        """
        ...
    
    def get_padding_left(self) -> int:
        """
        Return the left padding of this LayoutElement.

        This function returns the value of the left padding for this LayoutElement.

        :return: The left padding of this LayoutElement as an integer.
        """
        ...
    
    def get_padding_right(self) -> int:
        """
        Return the right padding of this LayoutElement.

        This function returns the value of the right padding for this LayoutElement.

        :return: The right padding of this LayoutElement as an integer.
        """
        ...
    
    def get_padding_top(self) -> int:
        """
        Return the top padding of this LayoutElement.

        This function returns the value of the top padding for this LayoutElement.

        :return: The top padding of this LayoutElement as an integer.
        """
        ...
    
    def get_previous_paint_box(self) -> typing.Optional[typing.Tuple[int, int, int, int]]:
        """
        Get the bounding box of the previously painted element.

        This method returns the last recorded paint box of the element, which
        represents its position and dimensions on the PDF page.

        :return: A tuple (x, y, width, height) representing the last painted box,
                 or None if the element has not been painted yet.
        """
        ...
    
    def get_size(self, available_space: typing.Tuple[int, int]) -> typing.Tuple[int, int]:
        """
        Calculate and return the size of the layout element based on available space.

        This function uses the available space to compute the size (width, height)
        of the layout element in points.

        :param available_space: Tuple representing the available space (width, height).
        :return:                Tuple containing the size (width, height) in points.
        """
        ...
    
    def get_vertical_alignment(self) -> VerticalAlignment:
        """
        Return the vertical alignment of this LayoutElement.

        This function returns the vertical alignment setting for this LayoutElement.

        :return: The vertical alignment of this LayoutElement.
        """
        ...
    
    def paint(self, available_space: typing.Tuple[int, int, int, int], page: Page) -> None:
        """
        Render the layout element onto the provided page using the available space.

        This function renders the layout element within the given available space on the specified page.

        :param available_space: A tuple representing the available space (left, top, right, bottom).
        :param page:            The Page object on which to render the LayoutElement.
        :return:                None.
        """
        ...
    


