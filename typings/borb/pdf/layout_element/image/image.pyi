"""
This type stub file was generated by pyright.
"""

import pathlib
import typing
from borb.pdf.color.color import Color
from borb.pdf.layout_element.layout_element import LayoutElement
from borb.pdf.page import Page

"""
Represents an image that can be embedded in a PDF layout.

The `Image` class provides flexible options for specifying an image source. The image
can be supplied through a URL, image bytes, a `pathlib.Path`, or a `PIL.Image`
object. This class allows for seamless integration of images into PDF layouts.
"""
class Image(LayoutElement):
    """
    Represents an image that can be embedded in a PDF layout.

    The `Image` class provides flexible options for specifying an image source. The image
    can be supplied through a URL, image bytes, a `pathlib.Path`, or a `PIL.Image`
    object. This class allows for seamless integration of images into PDF layouts.
    """
    def __init__(self, bytes_path_pil_image_or_url: typing.Union[bytes, pathlib.Path, PIL.Image.Image, str], background_color: typing.Optional[Color] = ..., border_color: typing.Optional[Color] = ..., border_dash_pattern: typing.List[int] = ..., border_dash_phase: int = ..., border_width_bottom: int = ..., border_width_left: int = ..., border_width_right: int = ..., border_width_top: int = ..., horizontal_alignment: LayoutElement.HorizontalAlignment = ..., margin_bottom: int = ..., margin_left: int = ..., margin_right: int = ..., margin_top: int = ..., padding_bottom: int = ..., padding_left: int = ..., padding_right: int = ..., padding_top: int = ..., size: typing.Optional[typing.Tuple[int, int]] = ..., vertical_alignment: LayoutElement.VerticalAlignment = ...) -> None:
        """
        Initialize an Image object for use in a PDF document.

        The `Image` class represents an image that can be added to a PDF document. This constructor allows
        the user to specify the source of the image in various formats (bytes, file path, PIL image, or URL),
        along with a range of styling options such as background color, borders, alignment, and size. The
        image can be positioned with customizable margins and padding.

        :param bytes_path_pil_image_or_url: The image source, which can be provided as raw bytes,
                                            a file path (`pathlib.Path`),
                                            a PIL image object (`PIL.Image`),
                                            or a URL as a string.
        :param background_color:            The background color behind the image (optional).
        :param border_color:                The color of the image's border (optional).
        :param border_dash_pattern:         A list of integers defining the dash pattern for the border (default is solid).
        :param border_dash_phase:           The phase of the dash pattern for the border (default is 0).
        :param border_width_bottom:         The width of the bottom border (default is 0).
        :param border_width_left:           The width of the left border (default is 0).
        :param border_width_right:          The width of the right border (default is 0).
        :param border_width_top:            The width of the top border (default is 0).
        :param horizontal_alignment:        The horizontal alignment of the image (default is left-aligned).
        :param margin_bottom:               The margin below the image (default is 0).
        :param margin_left:                 The margin to the left of the image (default is 0).
        :param margin_right:                The margin to the right of the image (default is 0).
        :param margin_top:                  The margin above the image (default is 0).
        :param padding_bottom:              The padding below the image (default is 0).
        :param padding_left:                The padding to the left of the image (default is 0).
        :param padding_right:               The padding to the right of the image (default is 0).
        :param padding_top:                 The padding above the image (default is 0).
        :param size:                        A tuple defining the width and height of the image (optional).
                                            If not provided, the image will maintain its original dimensions.
        :param vertical_alignment:          The vertical alignment of the image (default is top-aligned).
        """
        ...
    
    def get_size(self, available_space: typing.Tuple[int, int]) -> typing.Tuple[int, int]:
        """
        Calculate and return the size of the layout element based on available space.

        This function uses the available space to compute the size (width, height)
        of the layout element in points.

        :param available_space: Tuple representing the available space (width, height).
        :return:                Tuple containing the size (width, height) in points.
        """
        ...
    
    def paint(self, available_space: typing.Tuple[int, int, int, int], page: Page) -> None:
        """
        Render the layout element onto the provided page using the available space.

        This function renders the layout element within the given available space on the specified page.

        :param available_space: A tuple representing the available space (left, top, right, bottom).
        :param page:            The Page object on which to render the LayoutElement.
        :return:                None.
        """
        ...
    


