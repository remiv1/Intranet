"""
This type stub file was generated by pyright.
"""

import functools
import typing
from borb.pdf.color.color import Color
from borb.pdf.font.font import Font
from borb.pdf.layout_element.layout_element import LayoutElement
from borb.pdf.page import Page

"""
Represents a sequence of characters on a single line.

Chunks correspond to continuous text that does not wrap across multiple lines. The text
in a `Chunk` starts and ends within the same line in a PDF document, making it the
smallest unit of text within a layout.
"""
class Chunk(LayoutElement):
    """
    Represents a sequence of characters on a single line.

    Chunks correspond to continuous text that does not wrap across multiple lines. The text
    in a `Chunk` starts and ends within the same line in a PDF document, making it the
    smallest unit of text within a layout.
    """
    def __init__(self, text: str, background_color: typing.Optional[Color] = ..., border_color: typing.Optional[Color] = ..., border_dash_pattern: typing.List[int] = ..., border_dash_phase: int = ..., border_width_bottom: int = ..., border_width_left: int = ..., border_width_right: int = ..., border_width_top: int = ..., character_spacing: float = ..., font: typing.Optional[typing.Union[Font, str]] = ..., font_color: Color = ..., font_size: int = ..., horizontal_alignment: LayoutElement.HorizontalAlignment = ..., margin_bottom: int = ..., margin_left: int = ..., margin_right: int = ..., margin_top: int = ..., padding_bottom: int = ..., padding_left: int = ..., padding_right: int = ..., padding_top: int = ..., vertical_alignment: LayoutElement.VerticalAlignment = ..., word_spacing: float = ...) -> None:
        """
        Initialize a Chunk object representing a segment of text.

        The `Chunk` class encapsulates a chunk of text with customizable properties such as background color,
        font, font size, and alignment.

        :param text:                    The text content of the chunk.
        :param background_color:        The background color of the chunk. Defaults to None.
        :param font:                    The font used for the text. Defaults to None.
        :param font_color:              The color of the font. Defaults to X11Color.BLACK.
        :param font_size:               The size of the font in points. Defaults to 12.
        :param border_color:            The color of the border around the chunk. Defaults to None.
        :param border_dash_pattern:     A list defining the dash pattern for the border. Defaults to an empty list.
        :param border_dash_phase:       The phase of the dash pattern. Defaults to 0.
        :param border_width_bottom:     Width of the bottom border in pixels. Defaults to 0.
        :param border_width_left:       Width of the left border in pixels. Defaults to 0.
        :param border_width_right:      Width of the right border in pixels. Defaults to 0.
        :param border_width_top:        Width of the top border in pixels. Defaults to 0.
        :param horizontal_alignment:    Horizontal alignment of the text within the chunk. Defaults to LayoutElement.HorizontalAlignment.LEFT.
        :param margin_bottom:           Bottom margin in pixels. Defaults to 0.
        :param margin_left:             Left margin in pixels. Defaults to 0.
        :param margin_right:            Right margin in pixels. Defaults to 0.
        :param margin_top:              Top margin in pixels. Defaults to 0.
        :param padding_bottom:          Bottom padding in pixels. Defaults to 0.
        :param padding_left:            Left padding in pixels. Defaults to 0.
        :param padding_right:           Right padding in pixels. Defaults to 0.
        :param padding_top:             Top padding in pixels. Defaults to 0.
        :param vertical_alignment:      Vertical alignment of the text within the chunk. Defaults to LayoutElement.VerticalAlignment.BOTTOM.
        """
        ...
    
    def get_character_spacing(self) -> float:
        """
        Retrieve the character spacing for this chunk of text.

        Character spacing determines the additional space added between characters in the text.
        It is specified as an unscaled value, meaning it will later be multiplied by the font size
        to compute the final spacing. A character spacing of `0` (the default) means no extra spacing
        is added, while a value of `1` adds an extra space equal to the font size (in ems) to the
        width of each character.

        :return: The unscaled character spacing as a float.
        """
        ...
    
    def get_font(self) -> Font:
        """
        Return the font used for the text chunk.

        This method returns the font object associated with the text chunk,
        which defines the typography and style of the rendered text.

        :return: The font object associated with this Chunk
        """
        ...
    
    def get_font_color(self) -> Color:
        """
        Return the font color used for the text chunk.

        This method returns the color object associated with the text chunk,
        which determines the color of the rendered text.

        :return: The color object associated with this Chunk
        """
        ...
    
    def get_font_size(self) -> int:
        """
        Return the font size used for the text chunk.

        This method returns the font size associated with the text chunk.

        :return: The font size associated with this Chunk
        """
        ...
    
    @functools.cache
    def get_size(self, available_space: typing.Tuple[int, int]) -> typing.Tuple[int, int]:
        """
        Calculate and return the size of the layout element based on available space.

        This function uses the available space to compute the size (width, height)
        of the layout element in points.

        :param available_space: Tuple representing the available space (width, height).
        :return:                Tuple containing the size (width, height) in points.
        """
        ...
    
    def get_text(self) -> str:
        """
        Return the text associated with the text chunk.

        This method returns the string content that is stored within the text chunk.

        :return: The text associated with this Chunk
        """
        ...
    
    def get_word_spacing(self) -> float:
        """
        Retrieve the word spacing for this chunk of text.

        Word spacing specifies the additional space added to each space character in the text.
        It is defined as an unscaled value, which will later be multiplied by the font size to
        determine the final spacing. A default value of `0` means no extra space is added, while
        a positive value increases the spacing for each space character.

        :return: The unscaled word spacing as a float.
        """
        ...
    
    def paint(self, available_space: typing.Tuple[int, int, int, int], page: Page) -> None:
        """
        Render the layout element onto the provided page using the available space.

        This function renders the layout element within the given available space on the specified page.

        :param available_space: A tuple representing the available space (left, top, right, bottom).
        :param page:            The Page object on which to render the LayoutElement.
        :return:                None.
        """
        ...
    


