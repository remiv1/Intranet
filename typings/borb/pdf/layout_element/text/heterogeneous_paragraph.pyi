"""
This type stub file was generated by pyright.
"""

import functools
import typing
from borb.pdf.color.color import Color
from borb.pdf.layout_element.layout_element import LayoutElement
from borb.pdf.layout_element.text.chunk import Chunk
from borb.pdf.page import Page

"""
Represents a paragraph composed of heterogeneous pieces of text.

The `HeterogeneousParagraph` class is used to create a paragraph that
contains various chunks of text with different styles, such as different
fonts, sizes, colors, etc. The user can pass `Chunk` objects to form the
paragraph, where each `Chunk` can have its own styling properties.
"""
class HeterogeneousParagraph(LayoutElement):
    """
    Represents a paragraph composed of heterogeneous pieces of text.

    The `HeterogeneousParagraph` class is used to create a paragraph that
    contains various chunks of text with different styles, such as different
    fonts, sizes, colors, etc. The user can pass `Chunk` objects to form the
    paragraph, where each `Chunk` can have its own styling properties.
    """
    def __init__(self, chunks: typing.List[Chunk], background_color: typing.Optional[Color] = ..., border_color: typing.Optional[Color] = ..., border_dash_pattern: typing.List[int] = ..., border_dash_phase: int = ..., border_width_bottom: int = ..., border_width_left: int = ..., border_width_right: int = ..., border_width_top: int = ..., fixed_leading: typing.Optional[int] = ..., horizontal_alignment: LayoutElement.HorizontalAlignment = ..., margin_bottom: int = ..., margin_left: int = ..., margin_right: int = ..., margin_top: int = ..., multiplied_leading: typing.Optional[float] = ..., padding_bottom: int = ..., padding_left: int = ..., padding_right: int = ..., padding_top: int = ..., preserve_whitespaces: bool = ..., text_alignment: LayoutElement.TextAlignment = ..., vertical_alignment: LayoutElement.VerticalAlignment = ...) -> None:
        """
        Initialize a HeterogeneousParagraph object composed of multiple Chunk objects.

        The `HeterogeneousParagraph` class allows the creation of a paragraph
        that consists of various `Chunk` objects, each potentially having different
        properties such as color, font, and background color. This facilitates the
        inclusion of richly formatted text within a single paragraph element.

        :param chunks:                  A list of `Chunk` objects representing individual pieces of text
                                        that may have varying styles and attributes.
        :param background_color:        Optional background color for the paragraph. Defaults to None.
        :param fixed_leading:           Optional fixed leading (line spacing) for the paragraph. If provided, it will override multiplied leading.
        :param multiplied_leading:      The factor by which to multiply the font size to calculate line spacing. Default is 1.2.
        :param text_alignment:          The alignment of the text within the paragraph. Defaults to left alignment.
        :param border_color:            Optional color for the border of the paragraph. Defaults to None.
        :param border_dash_pattern:     List defining the dash pattern for the border. Defaults to an empty list.
        :param border_dash_phase:       Phase offset for the dash pattern. Defaults to 0.
        :param border_width_bottom:     Width of the bottom border. Defaults to 0.
        :param border_width_left:       Width of the left border. Defaults to 0.
        :param border_width_right:      Width of the right border. Defaults to 0.
        :param border_width_top:        Width of the top border. Defaults to 0.
        :param horizontal_alignment:    Alignment of the paragraph within its containing element. Defaults to left alignment.
        :param margin_bottom:           Bottom margin around the paragraph. Defaults to 0.
        :param margin_left:             Left margin around the paragraph. Defaults to 0.
        :param margin_right:            Right margin around the paragraph. Defaults to 0.
        :param margin_top:              Top margin around the paragraph. Defaults to 0.
        :param padding_bottom:          Padding inside the bottom of the paragraph. Defaults to 0.
        :param padding_left:            Padding inside the left of the paragraph. Defaults to 0.
        :param padding_right:           Padding inside the right of the paragraph. Defaults to 0.
        :param padding_top:             Padding inside the top of the paragraph. Defaults to 0.
        :param vertical_alignment:      Alignment of the paragraph within its containing element vertically. Defaults to top alignment.
        """
        ...
    
    @functools.cache
    def get_size(self, available_space: typing.Tuple[int, int]) -> typing.Tuple[int, int]:
        """
        Calculate and return the size of the layout element based on available space.

        This function uses the available space to compute the size (width, height)
        of the layout element in points.

        :param available_space: Tuple representing the available space (width, height).
        :return:                Tuple containing the size (width, height) in points.
        """
        ...
    
    def paint(self, available_space: typing.Tuple[int, int, int, int], page: Page) -> None:
        """
        Render the layout element onto the provided page using the available space.

        This function renders the layout element within the given available space on the specified page.

        :param available_space: A tuple representing the available space (left, top, right, bottom).
        :param page:            The Page object on which to render the LayoutElement.
        :return:                None.
        """
        ...
    


