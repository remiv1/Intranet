"""
This type stub file was generated by pyright.
"""

import typing
from borb.pdf.color.color import Color
from borb.pdf.layout_element.layout_element import LayoutElement
from borb.pdf.page import Page

"""
Represents a block of preformatted code.

The `CodeSnippet` class is used to display a section of code within a document
or layout. It preserves the original formatting, including indentation, line
breaks, and spacing, making it suitable for presenting code snippets or other
preformatted text.
"""
class CodeSnippet(LayoutElement):
    """
    Represents a block of preformatted code.

    The `CodeSnippet` class is used to display a section of code within a document
    or layout. It preserves the original formatting, including indentation, line
    breaks, and spacing, making it suitable for presenting code snippets or other
    preformatted text.
    """
    def __init__(self, code: str, background_color: typing.Optional[Color] = ..., border_color: typing.Optional[Color] = ..., border_dash_pattern: typing.List[int] = ..., border_dash_phase: int = ..., border_width_bottom: int = ..., border_width_left: int = ..., border_width_right: int = ..., border_width_top: int = ..., font_size: int = ..., horizontal_alignment: LayoutElement.HorizontalAlignment = ..., margin_bottom: int = ..., margin_left: int = ..., margin_right: int = ..., margin_top: int = ..., padding_bottom: int = ..., padding_left: int = ..., padding_right: int = ..., padding_top: int = ..., remove_common_indent: bool = ..., vertical_alignment: LayoutElement.VerticalAlignment = ...) -> None:
        """
        Initialize a CodeSnippet object representing a block of code in the document.

        This constructor allows users to create a styled code snippet, including
        customization options for appearance such as background color, border, and alignment.

        :param code: The code to be displayed in the snippet.
        :param background_color: The background color of the code snippet (default is black).
        :param border_color: The color of the border around the snippet (default is None).
        :param border_dash_pattern: The pattern for dashed borders (default is an empty list).
        :param border_dash_phase: The phase for dashed borders (default is 0).
        :param border_width_bottom: The width of the bottom border (default is 0).
        :param border_width_left: The width of the left border (default is 0).
        :param border_width_right: The width of the right border (default is 0).
        :param border_width_top: The width of the top border (default is 0).
        :param font_size: The font size for the code (default is 12).
        :param horizontal_alignment: The horizontal alignment of the snippet (default is left).
        :param margin_bottom: The bottom margin of the snippet (default is 0).
        :param margin_left: The left margin of the snippet (default is 0).
        :param margin_right: The right margin of the snippet (default is 0).
        :param margin_top: The top margin of the snippet (default is 0).
        :param padding_bottom: The bottom padding of the snippet (default is 0).
        :param padding_left: The left padding of the snippet (default is 0).
        :param padding_right: The right padding of the snippet (default is 0).
        :param padding_top: The top padding of the snippet (default is 0).
        :param remove_common_indent: Whether or not to remove the common indent (prefix) from all lines of code (default is True).
        :param vertical_alignment: The vertical alignment of the snippet (default is top).
        """
        ...
    
    def get_size(self, available_space: typing.Tuple[int, int]) -> typing.Tuple[int, int]:
        """
        Calculate and return the size of the layout element based on available space.

        This function uses the available space to compute the size (width, height)
        of the layout element in points.

        :param available_space: Tuple representing the available space (width, height).
        :return:                Tuple containing the size (width, height) in points.
        """
        ...
    
    def paint(self, available_space: typing.Tuple[int, int, int, int], page: Page) -> None:
        """
        Render the layout element onto the provided page using the available space.

        This function renders the layout element within the given available space on the specified page.

        :param available_space: A tuple representing the available space (left, top, right, bottom).
        :param page:            The Page object on which to render the LayoutElement.
        :return:                None.
        """
        ...
    


