"""
This type stub file was generated by pyright.
"""

import typing
from borb.pdf.color.color import Color
from borb.pdf.layout_element.layout_element import LayoutElement
from borb.pdf.layout_element.text.heterogeneous_paragraph import HeterogeneousParagraph

"""
The `MarkdownParagraph` class: A paragraph layout element with Markdown-like formatting.

This class extends the functionality of `HeterogeneousParagraph` to allow users to create
richly formatted paragraphs using a simple Markdown-inspired syntax. It interprets
special characters to apply styles such as bold, italic, colored text, and highlighted
backgrounds to different parts of the text. Each segment of text, represented by a `Chunk`,
can have its own unique style properties.

Markdown-like formatting rules:
- `*italic*`: Italicized text.
- `**bold**`: Bold text.
- `~highlight~`: Highlighted text with a yellow background.
"""
MarkdownChunkType = ...
class MarkdownParagraph(HeterogeneousParagraph):
    """
    The `MarkdownParagraph` class: A paragraph layout element with Markdown-like formatting.

    This class extends the functionality of `HeterogeneousParagraph` to allow users to create
    richly formatted paragraphs using a simple Markdown-inspired syntax. It interprets
    special characters to apply styles such as bold, italic, colored text, and highlighted
    backgrounds to different parts of the text. Each segment of text, represented by a `Chunk`,
    can have its own unique style properties.

    Markdown-like formatting rules:
    - `*italic*`: Italicized text.
    - `**bold**`: Bold text.
    - `~highlight~`: Highlighted text with a yellow background.
    """
    def __init__(self, text: str, background_color: typing.Optional[Color] = ..., border_color: typing.Optional[Color] = ..., border_dash_pattern: typing.List[int] = ..., border_dash_phase: int = ..., border_width_bottom: int = ..., border_width_left: int = ..., border_width_right: int = ..., border_width_top: int = ..., fixed_leading: typing.Optional[int] = ..., horizontal_alignment: LayoutElement.HorizontalAlignment = ..., margin_bottom: int = ..., margin_left: int = ..., margin_right: int = ..., margin_top: int = ..., multiplied_leading: typing.Optional[float] = ..., padding_bottom: int = ..., padding_left: int = ..., padding_right: int = ..., padding_top: int = ..., preserve_whitespaces: bool = ..., text_alignment: LayoutElement.TextAlignment = ..., vertical_alignment: LayoutElement.VerticalAlignment = ...) -> None:
        """
        Initialize a `MarkdownParagraph` with markdown-like formatting and optional layout properties.

        This constructor creates a `MarkdownParagraph`, a subclass of `HeterogeneousParagraph`, designed
        to simplify the creation of richly formatted text blocks using markdown-like syntax.
        Each text segment is styled based on markdown-like markers such as `*`, `_`, `~`, and `~~`.

        :arg text: The text content to display, formatted using markdown-like syntax.
        :arg background_color: (Optional[Color]) Background color of the paragraph. Defaults to None.
        :arg border_color: (Optional[Color]) Border color of the paragraph. Defaults to None.
        :arg border_dash_pattern: (List[int]) Dash pattern for the border. Defaults to [].
        :arg border_dash_phase: (int) Starting phase for the border dash pattern. Defaults to 0.
        :arg border_width_bottom: (int) Width of the bottom border. Defaults to 0.
        :arg border_width_left: (int) Width of the left border. Defaults to 0.
        :arg border_width_right: (int) Width of the right border. Defaults to 0.
        :arg border_width_top: (int) Width of the top border. Defaults to 0.
        :arg default_chunk_background_color: (Optional[Color]) Default background color for text chunks. Defaults to None.
        :arg default_font: (Union[str, Font]) Default font for text chunks. Defaults to "Helvetica".
        :arg default_font_color: (Color) Default font color for text chunks. Defaults to `X11Color.BLACK`.
        :arg default_font_size: (int) Default font size for text chunks. Defaults to 12.
        :arg fixed_leading: (Optional[int]) Fixed line spacing in user space units. Defaults to None.
        :arg horizontal_alignment: (LayoutElement.HorizontalAlignment) Horizontal alignment of the paragraph. Defaults to `HorizontalAlignment.LEFT`.
        :arg margin_bottom: (int) Bottom margin of the paragraph. Defaults to 0.
        :arg margin_left: (int) Left margin of the paragraph. Defaults to 0.
        :arg margin_right: (int) Right margin of the paragraph. Defaults to 0.
        :arg margin_top: (int) Top margin of the paragraph. Defaults to 0.
        :arg multiplied_leading: (Optional[float]) Line spacing multiplier. Defaults to 1.2.
        :arg padding_bottom: (int) Bottom padding of the paragraph. Defaults to 0.
        :arg padding_left: (int) Left padding of the paragraph. Defaults to 0.
        :arg padding_right: (int) Right padding of the paragraph. Defaults to 0.
        :arg padding_top: (int) Top padding of the paragraph. Defaults to 0.
        :arg preserve_whitespaces: (bool) Whether to preserve whitespaces in the text. Defaults to False.
        :arg text_alignment: (LayoutElement.TextAlignment) Text alignment within the paragraph. Defaults to `TextAlignment.LEFT`.
        :arg vertical_alignment: (LayoutElement.VerticalAlignment) Vertical alignment of the paragraph. Defaults to `VerticalAlignment.TOP`.
        """
        ...
    


