"""
This type stub file was generated by pyright.
"""

import typing
from borb.pdf.color.color import Color
from borb.pdf.layout_element.shape.shape import Shape

"""
Utility class providing static methods for generating predefined shape objects for line art.

The `LineArt` class offers methods to create common shapes such as arrows, regular n-gons,
and other geometric figures. These shape objects are suitable for use in various drawing
or graphic applications and can be further customized or manipulated.
"""
class LineArt:
    """
    Utility class providing static methods for generating predefined shape objects for line art.

    The `LineArt` class offers methods to create common shapes such as arrows, regular n-gons,
    and other geometric figures. These shape objects are suitable for use in various drawing
    or graphic applications and can be further customized or manipulated.
    """
    @staticmethod
    def arrow_down(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a downward arrow.

        This function creates and returns a Shape object that visually represents
        a downward-pointing arrow.

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def arrow_left(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a leftward arrow.

        This function creates and returns a Shape object that visually represents
        a leftward-pointing arrow.

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def arrow_right(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a rightward arrow.

        This function creates and returns a Shape object that visually represents
        a rightward-pointing arrow.

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def arrow_up(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting an upward arrow.

        This function creates and returns a Shape object that visually represents
        an upward-pointing arrow.

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def blob(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting an (ink) blob.

        This function creates and returns a Shape object that visually represents
        an (ink) blob.

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def circle(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a circle.

        This function creates and returns a Shape object that visually represents
        a circle.

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def cross(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a cross.

        This function creates and returns a Shape object that visually represents
        a cross.

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def dragon_curve(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., number_of_iterations: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a Heighway dragon curve.

        This function creates and returns a Shape object that visually represents
        a Heighway dragon (also known as the Harterâ€“Heighway dragon, or the Jurassic Park dragon)

        :param number_of_iterations:    the number of iterations used to draw the curve (default 5)
        :param stroke_color:            the color in which to draw the Shape
        :param fill_color:              the color in which to fill the Shape
        :param line_width:              the line width of the Shape
        :param dash_pattern:            the dash pattern to be used when drawing the Shape
        :param dash_phase:              the dash phase to be used when starting to draw the Shape
        :return:                        a Shape
        """
        ...
    
    @staticmethod
    def five_pointed_star(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a five-pointed star.

        This function creates and returns a Shape object that visually represents
        a five-pointed star.

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_card(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting an card vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        a card vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_collate(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a collate vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        a collate vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_data(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting an data vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        a data vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_database(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a database vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        a database vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_decision(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting an decision vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        a decision vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_delay(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a delay vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        a delay vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_direct_data(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a direct data vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        a direct data vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_display(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting an display vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        a display vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_document(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a document vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        a document vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_extract(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting an extract vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        an extract vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_internal_storage(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting an internal storage vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        an internal storage vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_loop_limit(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a loop limit vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        a loop limit vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_manual_input(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a manual input vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        a manual input vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_manual_operation(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a manual operation vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        a manual operation vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_merge(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a merge vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        a merge vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_multiple_documents(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a multiple documents vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        a multiple documents vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_off_page_reference(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting an off page reference vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        an off page reference vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_on_page_reference(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting an on page reference vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        an on page reference vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_or(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a logical OR vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        a logical OR vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_paper_tape(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a paper tape vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        a paper tape vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_predefined_document(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a predefined document vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        a predefined document vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_predefined_process(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a predefined process vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        a predefined process vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_preparation(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a preparation vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        a preparation vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_process(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a process vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        a process vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_process_iso_9000(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting an ISO-9000 process vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        an ISO-9000 process vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_sequential_data(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a sequential data vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        a sequential data vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_sort(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a sort vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        a sort vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_stored_data(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a stored data vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        a stored data vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_summing_junction(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a summing junction vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        a summing junction vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_termination(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a termination vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        a termination vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def flowchart_transport(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a transport vertex (in flowcharts).

        This function creates and returns a Shape object that visually represents
        a transport vertex (in flowcharts).

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def four_pointed_star(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a four-pointed star.

        This function creates and returns a Shape object that visually represents
        a four-pointed star.

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def fraction_of_circle(angle_in_degrees: int, dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a fraction of a circle.

        This function creates and returns a Shape object that visually represents
        a fraction of a circle.

        :param angle_in_degrees:    the fraction of the circle to draw
        :param stroke_color:        the color in which to draw the Shape
        :param fill_color:          the color in which to fill the Shape
        :param line_width:          the line width of the Shape
        :param dash_pattern:        the dash pattern to be used when drawing the Shape
        :param dash_phase:          the dash phase to be used when starting to draw the Shape
        :return:                    a Shape
        """
        ...
    
    @staticmethod
    def half_of_circle(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting half of a circle.

        This function creates and returns a Shape object that visually represents
        half of a circle.

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def heart(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a heart.

        This function creates and returns a Shape object that visually represents
        a heart.

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def heptagon(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a heptagon.

        This function creates and returns a Shape object that visually represents
        a heptagon.

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def hexagon(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a hexagon.

        This function creates and returns a Shape object that visually represents
        a hexagon.

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def isosceles_triangle(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting an isosceles triangle.

        This function creates and returns a Shape object that visually represents
        an isosceles triangle.

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def lissajours(x_frequency: int, y_frequency: int, dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a lissajours figure.

        This function creates and returns a Shape object that visually represents
        a lissajours figure.

        :param x_frequency:
        :param y_frequency:
        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def n_gon(number_of_sides: int, dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a regular n-gon.

        This function creates and returns a Shape object that visually represents
        a regular n-gon.

        :param number_of_sides: the number of vertices in the n-gon
        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def n_pointed_star(number_of_points: int, dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting an n-pointed star.

        This function creates and returns a Shape object that visually represents
        an n-pointed star.

        :param number_of_points:    the number of vertices in the star
        :param stroke_color:        the color in which to draw the Shape
        :param fill_color:          the color in which to fill the Shape
        :param line_width:          the line width of the Shape
        :param dash_pattern:        the dash pattern to be used when drawing the Shape
        :param dash_phase:          the dash phase to be used when starting to draw the Shape
        :return:                    a Shape
        """
        ...
    
    @staticmethod
    def n_toothed_gear(number_of_teeth: int, dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting an n-toothed gear.

        This function creates and returns a Shape object that visually represents
        an n-toothed gear.

        :param number_of_teeth: the number of gear teeth
        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def octagon(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting an octagon.

        This function creates and returns a Shape object that visually represents
        an octagon.

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def parallelogram(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a parallelogram.

        This function creates and returns a Shape object that visually represents
        a parallelogram.

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def pentagon(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a pentagon.

        This function creates and returns a Shape object that visually represents
        a pentagon.

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def rectangle(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a rectangle.

        This function creates and returns a Shape object that visually represents
        a rectangle.

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def rectangular_maze(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., horizontal_scale: int = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ..., vertical_scale: int = ...) -> Shape:
        """
        Return a Shape object depicting a rectangular maze.

        This function creates and returns a Shape object that visually represents
        a rectangular maze.

        :param horizontal_scale:    the horizontal number of cells (a parameter of the maze generation algorithm)
        :param vertical_scale:      the vertical number of cells (a parameter of the maze generation algorithm)
        :param stroke_color:        the color in which to draw the Shape
        :param fill_color:          the color in which to fill the Shape
        :param line_width:          the line width of the Shape
        :param dash_pattern:        the dash pattern to be used when drawing the Shape
        :param dash_phase:          the dash phase to be used when starting to draw the Shape
        :return:                    a Shape
        """
        ...
    
    @staticmethod
    def right_angled_triangle(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a right-angled triangle.

        This function creates and returns a Shape object that visually represents
        a right-angled triangle.

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def six_pointed_star(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a six-pointed star.

        This function creates and returns a Shape object that visually represents
        a six-pointed star.

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def square(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a square.

        This function creates and returns a Shape object that visually represents
        a square.

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def sticky_note(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a sticky note.

        This function creates and returns a Shape object that visually represents
        a sticky note.

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def three_quarters_of_circle(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting three quarters of a circle.

        This function creates and returns a Shape object that visually represents
        three quarters of a circle.

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    
    @staticmethod
    def trapezoid(dash_pattern: typing.List[int] = ..., dash_phase: int = ..., fill_color: typing.Optional[Color] = ..., line_width: int = ..., stroke_color: typing.Optional[Color] = ...) -> Shape:
        """
        Return a Shape object depicting a trapezoid.

        This function creates and returns a Shape object that visually represents
        a trapezoid.

        :param stroke_color:    the color in which to draw the Shape
        :param fill_color:      the color in which to fill the Shape
        :param line_width:      the line width of the Shape
        :param dash_pattern:    the dash pattern to be used when drawing the Shape
        :param dash_phase:      the dash phase to be used when starting to draw the Shape
        :return:                a Shape
        """
        ...
    


