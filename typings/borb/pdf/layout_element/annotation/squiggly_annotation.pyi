"""
This type stub file was generated by pyright.
"""

import typing
from borb.pdf.color.color import Color
from borb.pdf.layout_element.annotation.annotation import Annotation
from borb.pdf.layout_element.layout_element import LayoutElement
from borb.pdf.page import Page

"""
Represents a squiggly text markup annotation.

Squiggly annotations (PDF 1.4) appear as jagged underlines in the text of a document.
They can also function as highlights, underlines, or strikeouts, which are supported in
earlier versions (PDF 1.3). When opened, they display a pop-up window containing the text
of the associated note. Table 179 shows the annotation dictionary entries specific to these
types of annotations.
"""
class SquigglyAnnotation(Annotation):
    """
    Represents a squiggly text markup annotation.

    Squiggly annotations (PDF 1.4) appear as jagged underlines in the text of a document.
    They can also function as highlights, underlines, or strikeouts, which are supported in
    earlier versions (PDF 1.3). When opened, they display a pop-up window containing the text
    of the associated note. Table 179 shows the annotation dictionary entries specific to these
    types of annotations.
    """
    def __init__(self, background_color: typing.Optional[Color] = ..., border_color: typing.Optional[Color] = ..., border_dash_pattern: typing.List[int] = ..., border_dash_phase: int = ..., border_width_bottom: int = ..., border_width_left: int = ..., border_width_right: int = ..., border_width_top: int = ..., contents: typing.Optional[str] = ..., horizontal_alignment: LayoutElement.HorizontalAlignment = ..., line_width: int = ..., margin_bottom: int = ..., margin_left: int = ..., margin_right: int = ..., margin_top: int = ..., padding_bottom: int = ..., padding_left: int = ..., padding_right: int = ..., padding_top: int = ..., size: typing.Tuple[int, int] = ..., stroke_color: Color = ..., vertical_alignment: LayoutElement.VerticalAlignment = ...) -> None:
        """
        Initialize a SquigglyAnnotation object, which represents a squiggly underline annotation in a PDF document.

        This annotation is often used to highlight text with a wavy or squiggly underline for indicating
        focus areas, errors, or emphasis. It includes properties to customize appearance, positioning, and size.
        The stroke color is typically set to yellow but can be customized.

        :param background_color:        The background color of the annotation. Defaults to None (transparent).
        :param border_color:            The color of the annotation's border. Defaults to None.
        :param border_dash_pattern:     A list specifying the dash pattern for the border. Defaults to an empty list (solid border).
        :param border_dash_phase:       The phase offset for the border dash pattern. Defaults to 0.
        :param border_width_bottom:     The width of the bottom border of the annotation. Defaults to 0.
        :param border_width_left:       The width of the left border of the annotation. Defaults to 0.
        :param border_width_right:      The width of the right border of the annotation. Defaults to 0.
        :param border_width_top:        The width of the top border of the annotation. Defaults to 0.
        :param contents:                Optional text content to be displayed with the annotation. Defaults to None.
        :param horizontal_alignment:    The horizontal alignment of the annotation (e.g., left, center, right). Defaults to LEFT.
        :param line_width:              The width of the squiggly line stroke. Defaults to 1.
        :param margin_bottom:           The bottom margin of the annotation. Defaults to 0.
        :param margin_left:             The left margin of the annotation. Defaults to 0.
        :param margin_right:            The right margin of the annotation. Defaults to 0.
        :param margin_top:              The top margin of the annotation. Defaults to 0.
        :param padding_bottom:          The bottom padding inside the annotation, between the content and the border. Defaults to 0.
        :param padding_left:            The left padding inside the annotation. Defaults to 0.
        :param padding_right:           The right padding inside the annotation. Defaults to 0.
        :param padding_top:             The top padding inside the annotation. Defaults to 0.
        :param size:                    A tuple specifying the width and height of the annotation. Defaults to (100, 100).
        :param stroke_color:            The color of the squiggly line (default is yellow). Defaults to X11Color.YELLOW_MUNSELL.
        :param vertical_alignment:      The vertical alignment of the annotation (e.g., top, middle, bottom). Defaults to TOP.
        """
        ...
    
    def paint(self, available_space: typing.Tuple[int, int, int, int], page: Page) -> None:
        """
        Render the layout element onto the provided page using the available space.

        This function renders the layout element within the given available space on the specified page.

        :param available_space: A tuple representing the available space (left, top, right, bottom).
        :param page:            The Page object on which to render the LayoutElement.
        :return:                None.
        """
        ...
    


