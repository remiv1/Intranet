"""
This type stub file was generated by pyright.
"""

import typing
from borb.pdf.color.color import Color
from borb.pdf.layout_element.annotation.annotation import Annotation
from borb.pdf.layout_element.layout_element import LayoutElement
from borb.pdf.page import Page

"""
Represents a free text annotation in a PDF document.

A free text annotation (PDF 1.3) displays text directly on the page. Unlike an ordinary text
annotation (see 12.5.6.4, “Text Annotations”), a free text annotation does not have an open or
closed state; instead, the text is always visible.

Table 174 shows the annotation dictionary entries specific to this type of annotation.
Section 12.7.3.3, “Variable Text,” describes the process of using these entries to generate
the appearance of the text in these annotations.
"""
class FreeTextAnnotation(Annotation):
    """
    Represents a free text annotation in a PDF document.

    A free text annotation (PDF 1.3) displays text directly on the page. Unlike an ordinary text
    annotation (see 12.5.6.4, “Text Annotations”), a free text annotation does not have an open or
    closed state; instead, the text is always visible.

    Table 174 shows the annotation dictionary entries specific to this type of annotation.
    Section 12.7.3.3, “Variable Text,” describes the process of using these entries to generate
    the appearance of the text in these annotations.
    """
    def __init__(self, contents: str, background_color: typing.Optional[Color] = ..., border_color: typing.Optional[Color] = ..., border_dash_pattern: typing.List[int] = ..., border_dash_phase: int = ..., border_width_bottom: int = ..., border_width_left: int = ..., border_width_right: int = ..., border_width_top: int = ..., font_color: Color = ..., font_size: int = ..., horizontal_alignment: LayoutElement.HorizontalAlignment = ..., margin_bottom: int = ..., margin_left: int = ..., margin_right: int = ..., margin_top: int = ..., padding_bottom: int = ..., padding_left: int = ..., padding_right: int = ..., padding_top: int = ..., size: typing.Tuple[int, int] = ..., stroke_color: typing.Optional[Color] = ..., text_alignment: LayoutElement.TextAlignment = ..., vertical_alignment: LayoutElement.VerticalAlignment = ...) -> None:
        """
        Initialize a FreeTextAnnotation, a customizable text annotation in a PDF.

        Initialize a FreeTextAnnotation object, which allows for creating a customizable annotation containing free text
        within a PDF document.

        :param contents:                The text content of the annotation.
        :param background_color:        The background color of the annotation. Defaults to None (transparent).
        :param border_color:            The color of the annotation's border. Defaults to None.
        :param border_dash_pattern:     A list specifying the dash pattern for the annotation's border. Defaults to an empty list (solid border).
        :param border_dash_phase:       The phase offset for the border dash pattern. Defaults to 0.
        :param border_width_bottom:     The width of the bottom border of the annotation. Defaults to 0.
        :param border_width_left:       The width of the left border of the annotation. Defaults to 0.
        :param border_width_right:      The width of the right border of the annotation. Defaults to 0.
        :param border_width_top:        The width of the top border of the annotation. Defaults to 0.
        :param font_color:              The color of the text font. Defaults to X11Color.BLACK.
        :param font_size:               The size of the text font in points. Defaults to 12.
        :param horizontal_alignment:    The horizontal alignment of the annotation within its bounding box (e.g., left, center, right). Defaults to LEFT.
        :param margin_bottom:           The bottom margin within the annotation. Defaults to 0.
        :param margin_left:             The left margin within the annotation. Defaults to 0.
        :param margin_right:            The right margin within the annotation. Defaults to 0.
        :param margin_top:              The top margin within the annotation. Defaults to 0.
        :param padding_bottom:          The bottom padding inside the annotation, between the text and the border. Defaults to 0.
        :param padding_left:            The left padding inside the annotation. Defaults to 0.
        :param padding_right:           The right padding inside the annotation. Defaults to 0.
        :param padding_top:             The top padding inside the annotation. Defaults to 0.
        :param size:                    A tuple specifying the width and height of the annotation. Defaults to (100, 100).
        :param stroke_color:            The stroke color applied to the text. Defaults to X11Color.WHITE.
        :param text_alignment:          The alignment of the text within the annotation (e.g., left, center, right). Defaults to LEFT.
        :param vertical_alignment:      The vertical alignment of the annotation within its bounding box (e.g., top, middle, bottom). Defaults to TOP.
        """
        ...
    
    def paint(self, available_space: typing.Tuple[int, int, int, int], page: Page) -> None:
        """
        Render the layout element onto the provided page using the available space.

        This function renders the layout element within the given available space on the specified page.

        :param available_space: A tuple representing the available space (left, top, right, bottom).
        :param page:            The Page object on which to render the LayoutElement.
        :return:                None.
        """
        ...
    


