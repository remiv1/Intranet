"""
This type stub file was generated by pyright.
"""

import typing
from borb.pdf.color.color import Color
from borb.pdf.layout_element.form.form_field import FormField
from borb.pdf.layout_element.layout_element import LayoutElement
from borb.pdf.page import Page

"""
Represents a button form element in a PDF document.

The `Button` class is used to create interactive buttons within PDF forms,
allowing users to trigger specific actions, such as submitting the form,
resetting fields, or navigating to different sections of the document.
Buttons enhance user interactivity and improve the overall functionality
of PDF forms.
"""
class Button(FormField):
    """
    Represents a button form element in a PDF document.

    The `Button` class is used to create interactive buttons within PDF forms,
    allowing users to trigger specific actions, such as submitting the form,
    resetting fields, or navigating to different sections of the document.
    Buttons enhance user interactivity and improve the overall functionality
    of PDF forms.
    """
    def __init__(self, text: str, background_color: typing.Optional[Color] = ..., border_color: typing.Optional[Color] = ..., border_dash_pattern: typing.List[int] = ..., border_dash_phase: int = ..., border_width_bottom: int = ..., border_width_left: int = ..., border_width_right: int = ..., border_width_top: int = ..., default_value: str = ..., field_name: typing.Optional[str] = ..., font_color: Color = ..., font_size: int = ..., horizontal_alignment: LayoutElement.HorizontalAlignment = ..., margin_bottom: int = ..., margin_left: int = ..., margin_right: int = ..., margin_top: int = ..., padding_bottom: int = ..., padding_left: int = ..., padding_right: int = ..., padding_top: int = ..., value: str = ..., vertical_alignment: LayoutElement.VerticalAlignment = ...) -> None:
        """
        Initialize a Button component, representing a button form field that can be inserted into a PDF document.

        :param text:                    The text shown on the (javascript) Button
        :param background_color:        Optional; The background color of the text box. If None, the background is transparent.
        :param border_color:            Optional; The color of the border around the text box. If None, no border will be drawn.
        :param border_dash_pattern:     A list of integers defining the dash pattern for the border. For example, [5, 3] creates a dashed border.
        :param border_dash_phase:       The phase at which the dash pattern should start. Defaults to 0.
        :param border_width_bottom:     The width of the bottom border in pixels. Defaults to 0 (no bottom border).
        :param border_width_left:       The width of the left border in pixels. Defaults to 0 (no left border).
        :param border_width_right:      The width of the right border in pixels. Defaults to 0 (no right border).
        :param border_width_top:        The width of the top border in pixels. Defaults to 0 (no top border).
        :param default_value:           The default text that appears in the text box when no user input is provided.
        :param field_name:              Optional; The name of the text field. This can be used to identify the field within the PDF.
        :param font_color:              The color of the text within the text box. Defaults to black.
        :param font_size:               The size of the font used for the text within the text box. Defaults to 12.
        :param horizontal_alignment:    Defines the horizontal alignment of the text. Can be LEFT, CENTER, or RIGHT. Defaults to LEFT.
        :param margin_bottom:           The bottom margin of the text box in pixels. Defaults to 0.
        :param margin_left:             The left margin of the text box in pixels. Defaults to 0.
        :param margin_right:            The right margin of the text box in pixels. Defaults to 0.
        :param margin_top:              The top margin of the text box in pixels. Defaults to 0.
        :param padding_bottom:          The bottom padding inside the text box in pixels. Defaults to 0.
        :param padding_left:            The left padding inside the text box in pixels. Defaults to 0.
        :param padding_right:           The right padding inside the text box in pixels. Defaults to 0.
        :param padding_top:             The top padding inside the text box in pixels. Defaults to 0.
        :param value:                   The current value (text content) of the text box. Defaults to an empty string.
        :param vertical_alignment:      Defines the vertical alignment of the text. Can be TOP, MIDDLE, or BOTTOM. Defaults to TOP.
        """
        ...
    
    def get_size(self, available_space: typing.Tuple[int, int]) -> typing.Tuple[int, int]:
        """
        Calculate and return the size of the layout element based on available space.

        This function uses the available space to compute the size (width, height)
        of the layout element in points.

        :param available_space: Tuple representing the available space (width, height).
        :return:                Tuple containing the size (width, height) in points.
        """
        ...
    
    def paint(self, available_space: typing.Tuple[int, int, int, int], page: Page) -> None:
        """
        Render the layout element onto the provided page using the available space.

        This function renders the layout element within the given available space on the specified page.

        :param available_space: A tuple representing the available space (left, top, right, bottom).
        :param page:            The Page object on which to render the LayoutElement.
        :return:                None.
        """
        ...
    


