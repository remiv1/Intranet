"""
This type stub file was generated by pyright.
"""

"""
Generates lorem ipsum-like placeholder text in various styles.

The `Lipsum` class provides methods for creating lorem ipsum text, which
is commonly used as placeholder content in design and typesetting. This
class allows users to generate text in different formats and styles,
making it versatile for various applications, including web design,
document formatting, and graphic design.
"""
class Lipsum:
    """
    Generates lorem ipsum-like placeholder text in various styles.

    The `Lipsum` class provides methods for creating lorem ipsum text, which
    is commonly used as placeholder content in design and typesetting. This
    class allows users to generate text in different formats and styles,
    making it versatile for various applications, including web design,
    document formatting, and graphic design.
    """
    __AGATHA_CHRISTIE_MM: bytes = ...
    __ALAN_ALEXANDER_MILNE_MM: bytes = ...
    __ARTHUR_CONAN_DOYLE_MM: bytes = ...
    __EMILY_BRONTE_MM: bytes = ...
    __JANE_AUSTEN_MM: bytes = ...
    __LEWIS_CARROLL_MM: bytes = ...
    __LOREM_IPSUM_MM: bytes = ...
    __MARY_SHELLEY_MM: bytes = ...
    @staticmethod
    def generate_agatha_christie(number_of_characters: int) -> str:
        """
        Generate text resembling Agatha Christie's style using a Markov model.

        This method generates a string of approximately `n` characters based on a
        pre-built and compressed Markov model, which is decompressed and loaded to
        simulate Agatha Christie's writing style. The method attempts to generate
        a text length close to the specified `n` characters by predicting and
        chaining characters using the Markov model.

        :param number_of_characters:    The target number of characters to generate.
        :return:                        A string containing approximately `n` characters generated
                                        using the Agatha Christie Markov model.
        """
        ...
    
    @staticmethod
    def generate_alan_alexander_milne(number_of_characters: int) -> str:
        """
        Generate text resembling A.A. Milne's style using a Markov model.

        This method generates a string of approximately `n` characters based on a
        pre-built and compressed Markov model, which is decompressed and loaded to
        simulate A.A. Milne's writing style. The method attempts to generate
        a text length close to the specified `n` characters by predicting and
        chaining characters using the Markov model.

        :param number_of_characters:    The target number of characters to generate.
        :return:                        A string containing approximately `n` characters generated
                                        using the A.A. Milne Markov model.
        """
        ...
    
    @staticmethod
    def generate_arthur_conan_doyle(number_of_characters: int) -> str:
        """
        Generate text resembling Arthur Conan Doyle's style using a Markov model.

        This method generates a string of approximately `n` characters based on a
        pre-built and compressed Markov model, which is decompressed and loaded to
        simulate Arthur Conan Doyle's writing style. The method attempts to generate
        a text length close to the specified `n` characters by predicting and
        chaining characters using the Markov model.

        :param number_of_characters:    The target number of characters to generate.
        :return:                        A string containing approximately `n` characters generated
                                        using the Arthur Conan Doyle Markov model.
        """
        ...
    
    @staticmethod
    def generate_emily_bronte(number_of_characters: int) -> str:
        """
        Generate text resembling Emily Brontë's style using a Markov model.

        This method generates a string of approximately `n` characters based on a
        pre-built and compressed Markov model, which is decompressed and loaded to
        simulate Emily Brontë's writing style. The method attempts to generate
        a text length close to the specified `n` characters by predicting and
        chaining characters using the Markov model.

        :param number_of_characters:    The target number of characters to generate.
        :return:                        A string containing approximately `n` characters generated
                                        using the Emily Brontë Markov model.
        """
        ...
    
    @staticmethod
    def generate_jane_austen(number_of_characters: int) -> str:
        """
        Generate text resembling Jane Austen's style using a Markov model.

        This method generates a string of approximately `n` characters based on a
        pre-built and compressed Markov model, which is decompressed and loaded to
        simulate Jane Austen's writing style. The method attempts to generate
        a text length close to the specified `n` characters by predicting and
        chaining characters using the Markov model.

        :param number_of_characters:    The target number of characters to generate.
        :return:                        A string containing approximately `n` characters generated
                                        using the Jane Austen Markov model.
        """
        ...
    
    @staticmethod
    def generate_lewis_carroll(number_of_characters: int) -> str:
        """
        Generate text resembling Lewis Carroll's style using a Markov model.

        This method generates a string of approximately `n` characters based on a
        pre-built and compressed Markov model, which is decompressed and loaded to
        simulate Lewis Carroll's writing style. The method attempts to generate
        a text length close to the specified `n` characters by predicting and
        chaining characters using the Markov model.

        :param number_of_characters:    The target number of characters to generate.
        :return:                        A string containing approximately `n` characters generated
                                        using the Lewis Carroll Markov model.
        """
        ...
    
    @staticmethod
    def generate_lorem_ipsum(number_of_characters: int) -> str:
        """
        Generate text resembling a classic Lorem Ipsum style using a Markov model.

        This method generates a string of approximately `n` characters based on a
        pre-built and compressed Markov model, which is decompressed and loaded to
        simulate a classic Lorem Ipsum style. The method attempts to generate
        a text length close to the specified `n` characters by predicting and
        chaining characters using the Markov model.

        :param number_of_characters:    The target number of characters to generate.
        :return:                        A string containing approximately `n` characters generated
                                        using the Lorem Ipsum Markov model.
        """
        ...
    
    @staticmethod
    def generate_mary_shelley(number_of_characters: int) -> str:
        """
        Generate text resembling Mary Shelley's style using a Markov model.

        This method generates a string of approximately `n` characters based on a
        pre-built and compressed Markov model, which is decompressed and loaded to
        simulate Mary Shelley's writing style. The method attempts to generate
        a text length close to the specified `n` characters by predicting and
        chaining characters using the Markov model.

        :param number_of_characters:    The target number of characters to generate.
        :return:                        A string containing approximately `n` characters generated
                                        using the Mary Shelley Markov model.
        """
        ...
    


