"""
This type stub file was generated by pyright.
"""

import typing
from borb.pdf.visitor.node_visitor import NodeVisitor

"""
A visitor implementation for validating a PDF document against its declared conformance level.

This class operates within the Visitor Pattern and is responsible for:
- Determining the conformance level of the PDF document (e.g., PDF/A, PDF/UA, etc.).
- Gathering all relevant `ConformanceCheck` instances using `ConformanceChecks`.
- Traversing the document structure and executing checks on applicable PDF nodes.
- Reporting violations and optionally interacting with a root visitor.

This visitor is intended to be applied once per document and tracks its usage to prevent reuse.

It integrates with the `NodeVisitor` hierarchy and is designed to be composable with other visitors,
using delegation to a `root` visitor when necessary.
"""
class ValidationVisitor(NodeVisitor):
    """
    A visitor implementation for validating a PDF document against its declared conformance level.

    This class operates within the Visitor Pattern and is responsible for:
    - Determining the conformance level of the PDF document (e.g., PDF/A, PDF/UA, etc.).
    - Gathering all relevant `ConformanceCheck` instances using `ConformanceChecks`.
    - Traversing the document structure and executing checks on applicable PDF nodes.
    - Reporting violations and optionally interacting with a root visitor.

    This visitor is intended to be applied once per document and tracks its usage to prevent reuse.

    It integrates with the `NodeVisitor` hierarchy and is designed to be composable with other visitors,
    using delegation to a `root` visitor when necessary.
    """
    def __init__(self, root: typing.Optional[NodeVisitor] = ...) -> None:
        """
        Initialize the ValidationVisitor.

        This constructor sets up the visitor for PDF conformance validation. An optional
        root visitor can be passed in to enable delegation of certain operations (e.g., reference
        resolution or generic visitation logic).

        :param root: An optional root `NodeVisitor` instance used to delegate operations such as
                     reference resolution or node dispatch. If None, the visitor operates standalone.
        """
        ...
    
    def visit(self, node: typing.Any) -> typing.Optional[typing.Any]:
        """
        Traverse the PDF document tree using the visitor pattern.

        This method is called when a node does not have a specialized handler.
        Subclasses can override this method to provide default behavior or logging
        for unsupported nodes. If any operation is performed on the node (e.g.,
        writing or persisting), the method returns `True`. Otherwise, it returns
        `False` to indicate that the visitor did not process the node.

        :param node:    the node (PDFType) to be processed
        :return:        True if the visitor processed the node False otherwise
        """
        ...
    


