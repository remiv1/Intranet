"""
This type stub file was generated by pyright.
"""

"""
A class for decoding data compressed using the Flate (zlib) compression algorithm.

The FlateDecode algorithm is commonly used in PDF files to compress streams of data, particularly
when dealing with images or other binary data. Flate compression works efficiently by finding patterns
in the input data and encoding it in a way that reduces its size. It is a form of lossless compression,
meaning the original data can be fully reconstructed after decompression.

PDF files also support predictor functions to improve the effectiveness of compression algorithms like
Flate. These functions adjust the input data before compression, making it more predictable and
improving compression ratios. The most common predictor function used in PDFs is the TIFF Predictor 2,
which is a form of adaptive prediction applied to neighboring pixels or samples.

The `FlateDecode` class handles the decompression of data compressed using the Flate algorithm,
including support for handling different prediction methods that may have been applied to the data.
"""
class FlateDecode:
    """
    A class for decoding data compressed using the Flate (zlib) compression algorithm.

    The FlateDecode algorithm is commonly used in PDF files to compress streams of data, particularly
    when dealing with images or other binary data. Flate compression works efficiently by finding patterns
    in the input data and encoding it in a way that reduces its size. It is a form of lossless compression,
    meaning the original data can be fully reconstructed after decompression.

    PDF files also support predictor functions to improve the effectiveness of compression algorithms like
    Flate. These functions adjust the input data before compression, making it more predictable and
    improving compression ratios. The most common predictor function used in PDFs is the TIFF Predictor 2,
    which is a form of adaptive prediction applied to neighboring pixels or samples.

    The `FlateDecode` class handles the decompression of data compressed using the Flate algorithm,
    including support for handling different prediction methods that may have been applied to the data.
    """
    @staticmethod
    def decode(bytes_in: bytes, bits_per_component: int = ..., columns: int = ..., predictor: int = ...) -> bytes:
        """
        Decode data compressed using the Flate algorithm, optionally applying a predictor function based on the TIFF specification to improve compression efficiency.

        This method decompresses the input byte stream that has been compressed using Flate (zlib)
        compression. The method also supports decoding of data that was pre-processed with a predictor
        function to improve compression, commonly used in image compression (e.g., TIFF).

        The TIFF predictor functions modify the data before compression to make it more predictable,
        thus improving the compression ratio. The most commonly used predictor functions are Predictor 1
        (no prediction) and Predictor 2 (subtraction of neighboring pixel values).

        :param bytes_in:              The input byte sequence to be decompressed. It should represent Flate-compressed data.
        :param bits_per_component:    The number of bits per sample/component of the data (default is 8). This parameter affects how the data is processed after decompression.
        :param columns:               The number of columns in the data. This is relevant when applying certain predictor functions that need to know the structure of the data (default is 1).
        :param predictor:             The type of predictor function applied to the data before compression. Default is 1 (no prediction). Other possible values, such as 2, correspond to the TIFF Predictor 2.
        :return:                      The decompressed byte sequence, which may have had a predictor applied and been compressed with the Flate algorithm.
        """
        ...
    


