"""
This type stub file was generated by pyright.
"""

import typing
from borb.pdf.primitives import PDFType
from borb.pdf.visitor.read.read_visitor import ReadVisitor

"""
Visitor class for reading and parsing individual PDF indirect objects.

`ObjVisitor` is specialized to locate and interpret indirect objects in a PDF,
specifically those defined by `obj` and `endobj` markers. This includes handling
dictionaries, as well as streams enclosed within `stream` and `endstream` markers.

Using the visitor pattern, `ObjVisitor` reads:
- Object metadata (object number and generation)
- Dictionary entries within the `<< >>` delimiters
- Embedded stream data, if present, converting it into a Python-compatible format.

This class enables accurate extraction and parsing of standalone PDF objects,
supporting detailed and low-level PDF content processing.
"""
class ObjVisitor(ReadVisitor):
    """
    Visitor class for reading and parsing individual PDF indirect objects.

    `ObjVisitor` is specialized to locate and interpret indirect objects in a PDF,
    specifically those defined by `obj` and `endobj` markers. This includes handling
    dictionaries, as well as streams enclosed within `stream` and `endstream` markers.

    Using the visitor pattern, `ObjVisitor` reads:
    - Object metadata (object number and generation)
    - Dictionary entries within the `<< >>` delimiters
    - Embedded stream data, if present, converting it into a Python-compatible format.

    This class enables accurate extraction and parsing of standalone PDF objects,
    supporting detailed and low-level PDF content processing.
    """
    def visit(self, node: typing.Union[int, bytes]) -> typing.Optional[typing.Tuple[PDFType, int]]:
        """
        Traverse the PDF document tree using the visitor pattern.

        This method is called when a node does not have a specialized handler.
        Subclasses can override this method to provide default behavior or logging
        for unsupported nodes. If any operation is performed on the node (e.g.,
        writing or persisting), the method returns `True`. Otherwise, it returns
        `False` to indicate that the visitor did not process the node.

        :param node:    the node (PDFType) to be processed
        :return:        True if the visitor processed the node False otherwise
        """
        ...
    


