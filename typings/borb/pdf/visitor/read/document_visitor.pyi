"""
This type stub file was generated by pyright.
"""

import typing
from borb.pdf.primitives import PDFType
from borb.pdf.visitor.read.read_visitor import ReadVisitor

"""
Visitor class for converting PDF byte streams into a Document object.

The `DocumentVisitor` class implements the visitor pattern to traverse and process
the nodes of a PDF structure represented as a tree. This class is specifically designed
to handle the conversion of PDF bytes into a structured `Document` object, which can
facilitate further manipulation, rendering, or analysis of the PDF content.

By utilizing the visitor pattern, this class separates the algorithm for processing
PDF data from the structure of the PDF itself, promoting cleaner code and enhanced
maintainability. The `DocumentVisitor` class defines methods to visit various types
of nodes (such as pages, objects, or metadata) in the PDF tree, extracting relevant
information and assembling it into the `Document` object.
"""
class DocumentVisitor(ReadVisitor):
    """
    Visitor class for converting PDF byte streams into a Document object.

    The `DocumentVisitor` class implements the visitor pattern to traverse and process
    the nodes of a PDF structure represented as a tree. This class is specifically designed
    to handle the conversion of PDF bytes into a structured `Document` object, which can
    facilitate further manipulation, rendering, or analysis of the PDF content.

    By utilizing the visitor pattern, this class separates the algorithm for processing
    PDF data from the structure of the PDF itself, promoting cleaner code and enhanced
    maintainability. The `DocumentVisitor` class defines methods to visit various types
    of nodes (such as pages, objects, or metadata) in the PDF tree, extracting relevant
    information and assembling it into the `Document` object.
    """
    def visit(self, node: typing.Union[int, bytes]) -> typing.Optional[typing.Tuple[PDFType, int]]:
        """
        Traverse the PDF document tree using the visitor pattern.

        This method is called when a node does not have a specialized handler.
        Subclasses can override this method to provide default behavior or logging
        for unsupported nodes. If any operation is performed on the node (e.g.,
        writing or persisting), the method returns `True`. Otherwise, it returns
        `False` to indicate that the visitor did not process the node.

        :param node:    the node (PDFType) to be processed
        :return:        True if the visitor processed the node False otherwise
        """
        ...
    


