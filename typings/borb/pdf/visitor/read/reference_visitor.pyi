"""
This type stub file was generated by pyright.
"""

import typing
from borb.pdf.primitives import PDFType
from borb.pdf.visitor.read.read_visitor import ReadVisitor

"""
Visitor class for reading and parsing indirect references in a PDF byte stream.

`ReferenceVisitor` is specialized to identify and process indirect references
in a PDF, which link to other objects within the document by their object
number and generation. Using the visitor pattern, `ReferenceVisitor` parses
these references, allowing for efficient cross-referencing between objects
during PDF parsing.

This class:
- Recognizes the format of indirect references (`<object_number> <generation> R`)
- Extracts the referenced object number and generation for lookup
- Supports recursive traversal, enabling accurate reconstruction of nested structures

`ReferenceVisitor` is essential for managing PDF document structure, as it allows
references to be resolved and processed within a comprehensive parsing framework.
"""
class ReferenceVisitor(ReadVisitor):
    """
    Visitor class for reading and parsing indirect references in a PDF byte stream.

    `ReferenceVisitor` is specialized to identify and process indirect references
    in a PDF, which link to other objects within the document by their object
    number and generation. Using the visitor pattern, `ReferenceVisitor` parses
    these references, allowing for efficient cross-referencing between objects
    during PDF parsing.

    This class:
    - Recognizes the format of indirect references (`<object_number> <generation> R`)
    - Extracts the referenced object number and generation for lookup
    - Supports recursive traversal, enabling accurate reconstruction of nested structures

    `ReferenceVisitor` is essential for managing PDF document structure, as it allows
    references to be resolved and processed within a comprehensive parsing framework.
    """
    def visit(self, node: typing.Union[int, PDFType]) -> typing.Optional[typing.Tuple[PDFType, int]]:
        """
        Traverse the PDF document tree using the visitor pattern.

        This method is called when a node does not have a specialized handler.
        Subclasses can override this method to provide default behavior or logging
        for unsupported nodes. If any operation is performed on the node (e.g.,
        writing or persisting), the method returns `True`. Otherwise, it returns
        `False` to indicate that the visitor did not process the node.

        :param node:    the node (PDFType) to be processed
        :return:        True if the visitor processed the node False otherwise
        """
        ...
    


