"""
This type stub file was generated by pyright.
"""

import typing
from borb.pdf.primitives import PDFType
from borb.pdf.visitor.read.read_visitor import ReadVisitor

"""
Visitor class for reading and parsing dictionary objects in a PDF byte stream.

`DictVisitor` is specialized to locate and interpret PDF dictionary objects,
defined by `<< >>` delimiters. Using the visitor pattern, `DictVisitor` traverses
nodes in a PDF document, extracting key-value pairs within dictionaries and
converting them to Python dictionaries for structured processing.

This class:
- Identifies dictionary delimiters (`<<` and `>>`) in the PDF byte stream.
- Parses and decodes each key-value pair according to PDF encoding rules.
- Supports nested dictionaries, allowing for recursive parsing of complex objects.

`DictVisitor` is intended to facilitate structured handling of metadata, resources,
and other dictionary-based elements in the PDF.
"""
class DictVisitor(ReadVisitor):
    """
    Visitor class for reading and parsing dictionary objects in a PDF byte stream.

    `DictVisitor` is specialized to locate and interpret PDF dictionary objects,
    defined by `<< >>` delimiters. Using the visitor pattern, `DictVisitor` traverses
    nodes in a PDF document, extracting key-value pairs within dictionaries and
    converting them to Python dictionaries for structured processing.

    This class:
    - Identifies dictionary delimiters (`<<` and `>>`) in the PDF byte stream.
    - Parses and decodes each key-value pair according to PDF encoding rules.
    - Supports nested dictionaries, allowing for recursive parsing of complex objects.

    `DictVisitor` is intended to facilitate structured handling of metadata, resources,
    and other dictionary-based elements in the PDF.
    """
    __DICT_CLOSE_BRACKETS = ...
    __DICT_OPEN_BRACKETS = ...
    __SPACE = ...
    def visit(self, node: typing.Union[int, bytes]) -> typing.Optional[typing.Tuple[PDFType, int]]:
        """
        Traverse the PDF document tree using the visitor pattern.

        This method is called when a node does not have a specialized handler.
        Subclasses can override this method to provide default behavior or logging
        for unsupported nodes. If any operation is performed on the node (e.g.,
        writing or persisting), the method returns `True`. Otherwise, it returns
        `False` to indicate that the visitor did not process the node.

        :param node:    the node (PDFType) to be processed
        :return:        True if the visitor processed the node False otherwise
        """
        ...
    


