"""
This type stub file was generated by pyright.
"""

import typing
from borb.pdf.primitives import PDFType
from borb.pdf.visitor.read.read_visitor import ReadVisitor

"""
Visitor class for reading and parsing date strings in a PDF byte stream.

`DateStrVisitor` extends `ReadVisitor` to identify and process date-formatted
string objects within a PDF, converting them into structured Python representations.
Using the visitor pattern, `DateStrVisitor` traverses PDF nodes, extracts date values
according to the PDF specification, and enables precise handling of temporal metadata
embedded in the document.
"""
class DateStrVisitor(ReadVisitor):
    """
    Visitor class for reading and parsing date strings in a PDF byte stream.

    `DateStrVisitor` extends `ReadVisitor` to identify and process date-formatted
    string objects within a PDF, converting them into structured Python representations.
    Using the visitor pattern, `DateStrVisitor` traverses PDF nodes, extracts date values
    according to the PDF specification, and enables precise handling of temporal metadata
    embedded in the document.
    """
    __STR_CLOSE_BRACKET = ...
    __STR_OPEN_BRACKET = ...
    def visit(self, node: typing.Union[int, PDFType]) -> typing.Optional[typing.Tuple[PDFType, int]]:
        """
        Traverse the PDF document tree using the visitor pattern.

        This method is called when a node does not have a specialized handler.
        Subclasses can override this method to provide default behavior or logging
        for unsupported nodes. If any operation is performed on the node (e.g.,
        writing or persisting), the method returns `True`. Otherwise, it returns
        `False` to indicate that the visitor did not process the node.

        :param node:    the node (PDFType) to be processed
        :return:        True if the visitor processed the node False otherwise
        """
        ...
    


