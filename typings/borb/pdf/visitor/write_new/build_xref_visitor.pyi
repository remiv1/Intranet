"""
This type stub file was generated by pyright.
"""

import typing
from borb.pdf.visitor.write_new.write_new_visitor import WriteNewVisitor

"""
Visitor class for building the cross-reference (XRef) table in a PDF.

`BuildXRefVisitor` is a specialized visitor used in the initial stages
of PDF serialization to construct the XRef table. It iterates through
objects in the PDF document structure, replacing each object with a
`Reference` where appropriate, thus marking it as an item to be cross-referenced.
This class is primarily responsible for identifying which objects need to
be added to the XRef table and creating these references.

This visitor does not handle the persistence or writing of the XRef table
itself; it only prepares the objects for later serialization. Actual
persistence of the XRef data is handled by other components in the
serialization process, following the completion of this visitor's work.
"""
class BuildXRefVisitor(WriteNewVisitor):
    """
    Visitor class for building the cross-reference (XRef) table in a PDF.

    `BuildXRefVisitor` is a specialized visitor used in the initial stages
    of PDF serialization to construct the XRef table. It iterates through
    objects in the PDF document structure, replacing each object with a
    `Reference` where appropriate, thus marking it as an item to be cross-referenced.
    This class is primarily responsible for identifying which objects need to
    be added to the XRef table and creating these references.

    This visitor does not handle the persistence or writing of the XRef table
    itself; it only prepares the objects for later serialization. Actual
    persistence of the XRef data is handled by other components in the
    serialization process, following the completion of this visitor's work.
    """
    def visit(self, node: typing.Any) -> bool:
        """
        Traverse the PDF document tree using the visitor pattern.

        This method is called when a node does not have a specialized handler.
        Subclasses can override this method to provide default behavior or logging
        for unsupported nodes. If any operation is performed on the node (e.g.,
        writing or persisting), the method returns `True`. Otherwise, it returns
        `False` to indicate that the visitor did not process the node.

        :param node:    the node (PDFType) to be processed
        :return:        True if the visitor processed the node False otherwise
        """
        ...
    


