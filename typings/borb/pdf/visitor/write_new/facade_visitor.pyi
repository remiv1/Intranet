"""
This type stub file was generated by pyright.
"""

import typing
from borb.pdf.primitives import PDFType
from borb.pdf.visitor.write_new.write_new_visitor import WriteNewVisitor

"""
A facade class bundling multiple `WriteNewVisitor` objects.

The `FacadeVisitor` delegates the writing and persistence tasks of different sections
of a PDF document to specialized `WriteNewVisitor` instances. By grouping these
visitors, the `FacadeVisitor` simplifies the traversal and processing of various
document elements such as pages, text, and annotations. This ensures that each
section is handled properly, streamlining the PDF writing process.

This class serves as a central access point, facilitating easier extension or
modification of document writing behavior by coordinating multiple visitors.
"""
class FacadeVisitor(WriteNewVisitor):
    """
    A facade class bundling multiple `WriteNewVisitor` objects.

    The `FacadeVisitor` delegates the writing and persistence tasks of different sections
    of a PDF document to specialized `WriteNewVisitor` instances. By grouping these
    visitors, the `FacadeVisitor` simplifies the traversal and processing of various
    document elements such as pages, text, and annotations. This ensures that each
    section is handled properly, streamlining the PDF writing process.

    This class serves as a central access point, facilitating easier extension or
    modification of document writing behavior by coordinating multiple visitors.
    """
    __SPACE = ...
    __NEWLINE = ...
    def __init__(self) -> None:
        """
        Initialize the FacadeVisitor object to manage and coordinate multiple WriteNewVisitor instances.

        The constructor sets up the `FacadeVisitor` by preparing it to manage different
        `WriteNewVisitor` objects, each responsible for handling specific tasks like
        writing PDF pages, text, annotations, or other document elements. This
        initialization process enables the `FacadeVisitor` to serve as the central
        controller for document writing and persistence, ensuring that all sections
        of the PDF are handled by the appropriate visitor.
        """
        ...
    
    def bytes(self) -> bytes:
        """
        Return the byte representation of the written PDF content.

        This method retrieves the accumulated bytes from the PDF writing process,
        which represents the final content of the PDF document. The byte data
        includes all elements processed by the visitor and is suitable for saving
        or further processing, such as writing to a file or sending over a network.

        :return: A `bytes` object containing the written PDF content.
        """
        ...
    
    def get_reference(self, node: PDFType) -> PDFType:
        """
        Retrieve the indirect reference corresponding to a given PDF node.

        This method attempts to locate an indirect reference within the document's
        cross-reference (XRef) table that points to the provided node. If a match is
        found, the corresponding `reference` object is returned. If no match is found,
        or if the document context is unavailable, the original node is returned.

        :param node:    The PDF node for which to retrieve the corresponding indirect reference.
        :return:        A `reference` object pointing to the node if found, otherwise the original node.
        """
        ...
    
    def tell(self) -> int:
        """
        Return the current position in the PDF content stream.

        This method returns the current size of the byte stream representing the
        PDF content being written. It is analogous to a "tell" method in a file
        object, where the value represents the position (in bytes) within the
        document output stream.

        :return: The current position in the PDF byte stream as an integer.
        """
        ...
    
    def visit(self, node: typing.Any) -> bool:
        """
        Traverse the PDF document tree using the visitor pattern.

        This method is called when a node does not have a specialized handler.
        Subclasses can override this method to provide default behavior or logging
        for unsupported nodes. If any operation is performed on the node (e.g.,
        writing or persisting), the method returns `True`. Otherwise, it returns
        `False` to indicate that the visitor did not process the node.

        :param node:    the node (PDFType) to be processed
        :return:        True if the visitor processed the node False otherwise
        """
        ...
    


