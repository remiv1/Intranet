"""
This type stub file was generated by pyright.
"""

import typing
from borb.pdf.visitor.node_visitor import NodeVisitor
from borb.pdf.visitor.write_new.write_new_visitor import WriteNewVisitor

"""
A visitor that compresses the streams within a PDF document using the 'FlateDecode' filter and zlib compression algorithm.

This visitor is designed to compress streams that are decoded but have
no existing compressed byte data. It only works on streams that contain
the appropriate 'DecodedBytes' and 'Filter' attributes for the stream objects.
"""
class DefaultStreamCompressionVisitor(WriteNewVisitor):
    """
    A visitor that compresses the streams within a PDF document using the 'FlateDecode' filter and zlib compression algorithm.

    This visitor is designed to compress streams that are decoded but have
    no existing compressed byte data. It only works on streams that contain
    the appropriate 'DecodedBytes' and 'Filter' attributes for the stream objects.
    """
    def __init__(self, root: typing.Optional[NodeVisitor] = ...) -> None:
        """
        Initialize the DefaultStreamCompressionVisitor.

        :param root: Optional root visitor to start the traversal of the document.
        """
        ...
    
    def visit(self, node: typing.Any) -> typing.Optional[typing.Any]:
        """
        Traverse the PDF document tree using the visitor pattern.

        This method is called when a node does not have a specialized handler.
        Subclasses can override this method to provide default behavior or logging
        for unsupported nodes. If any operation is performed on the node (e.g.,
        writing or persisting), the method returns `True`. Otherwise, it returns
        `False` to indicate that the visitor did not process the node.

        :param node:    the node (PDFType) to be processed
        :return:        True if the visitor processed the node False otherwise
        """
        ...
    


