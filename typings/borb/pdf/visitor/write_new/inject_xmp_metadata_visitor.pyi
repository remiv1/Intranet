"""
This type stub file was generated by pyright.
"""

import typing
from borb.pdf.visitor.write_new.write_new_visitor import WriteNewVisitor

"""
A visitor class that injects XMP metadata into a PDF document.

This class extends `WriteNewVisitor` and is responsible for adding XMP metadata
to PDF documents. It follows the visitor design pattern and can be used to
traverse a PDF document's nodes and inject metadata based on the document's
conformance level. The metadata is injected only once per session to avoid
redundant changes.

The XMP metadata injection includes information such as the document's
producer, keywords, creation date, author, title, and more, with the format
conforming to Adobe's XMP specification. The class also ensures that the
metadata injection complies with the document's conformance level (e.g., PDF/A).
"""
class InjectXMPMetadataVisitor(WriteNewVisitor):
    """
    A visitor class that injects XMP metadata into a PDF document.

    This class extends `WriteNewVisitor` and is responsible for adding XMP metadata
    to PDF documents. It follows the visitor design pattern and can be used to
    traverse a PDF document's nodes and inject metadata based on the document's
    conformance level. The metadata is injected only once per session to avoid
    redundant changes.

    The XMP metadata injection includes information such as the document's
    producer, keywords, creation date, author, title, and more, with the format
    conforming to Adobe's XMP specification. The class also ensures that the
    metadata injection complies with the document's conformance level (e.g., PDF/A).
    """
    def visit(self, node: typing.Any) -> typing.Optional[typing.Any]:
        """
        Traverse the PDF document tree using the visitor pattern.

        This method is called when a node does not have a specialized handler.
        Subclasses can override this method to provide default behavior or logging
        for unsupported nodes. If any operation is performed on the node (e.g.,
        writing or persisting), the method returns `True`. Otherwise, it returns
        `False` to indicate that the visitor did not process the node.

        :param node:    the node (PDFType) to be processed
        :return:        True if the visitor processed the node False otherwise
        """
        ...
    


