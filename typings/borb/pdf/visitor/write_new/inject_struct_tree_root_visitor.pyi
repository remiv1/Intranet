"""
This type stub file was generated by pyright.
"""

import re
import typing
from borb.pdf.visitor.write_new.write_new_visitor import WriteNewVisitor

"""
A visitor to construct and inject a StructTreeRoot into a PDF document, ensuring proper tagging for accessibility.

This visitor scans the document's content streams, identifying nested MCIDs
(Marked Content Identifiers) to reconstruct the document's structure tree.
The StructTreeRoot is a critical component for tagged PDFs, enabling proper
navigation and accessibility for assistive technologies (e.g., screen readers).

The class follows the visitor pattern to traverse the document, creating a
logical structure hierarchy based on the marked content. If a StructTreeRoot
is missing, it is injected into the document's catalog.
"""
class InjectStructTreeRootVisitor(WriteNewVisitor):
    """
    A visitor to construct and inject a StructTreeRoot into a PDF document, ensuring proper tagging for accessibility.

    This visitor scans the document's content streams, identifying nested MCIDs
    (Marked Content Identifiers) to reconstruct the document's structure tree.
    The StructTreeRoot is a critical component for tagged PDFs, enabling proper
    navigation and accessibility for assistive technologies (e.g., screen readers).

    The class follows the visitor pattern to traverse the document, creating a
    logical structure hierarchy based on the marked content. If a StructTreeRoot
    is missing, it is injected into the document's catalog.
    """
    BMD_PATTERN: re.Pattern = ...
    EMC_PATTERN: re.Pattern = ...
    def visit(self, node: typing.Any) -> typing.Optional[typing.Any]:
        """
        Traverse the PDF document tree using the visitor pattern.

        This method is called when a node does not have a specialized handler.
        Subclasses can override this method to provide default behavior or logging
        for unsupported nodes. If any operation is performed on the node (e.g.,
        writing or persisting), the method returns `True`. Otherwise, it returns
        `False` to indicate that the visitor did not process the node.

        :param node:    the node (PDFType) to be processed
        :return:        True if the visitor processed the node False otherwise
        """
        ...
    


