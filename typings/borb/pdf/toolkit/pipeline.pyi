"""
This type stub file was generated by pyright.
"""

import typing
from borb.pdf.document import Document
from borb.pdf.page import Page
from borb.pdf.toolkit.pipe import Pipe

"""
Implements a pipeline design pattern for processing PDF content.

The `Pipeline` class orchestrates a sequence of `Pipe` objects to extract, filter, or
process content from a PDF. Each `Pipe` in the pipeline can perform a specific task,
and the `Pipeline` ensures that content flows through the sequence of `Pipe` objects
in the defined order.

This class supports processing both individual `Page` objects and entire `Document`
objects, making it flexible for a variety of PDF manipulation tasks.

The first `Pipe` in the pipeline may be a `Source` object, which acts as the entry
point for processing content streams. Subsequent pipes can perform filtering,
transformation, or extraction tasks.
"""
class Pipeline:
    """
    Implements a pipeline design pattern for processing PDF content.

    The `Pipeline` class orchestrates a sequence of `Pipe` objects to extract, filter, or
    process content from a PDF. Each `Pipe` in the pipeline can perform a specific task,
    and the `Pipeline` ensures that content flows through the sequence of `Pipe` objects
    in the defined order.

    This class supports processing both individual `Page` objects and entire `Document`
    objects, making it flexible for a variety of PDF manipulation tasks.

    The first `Pipe` in the pipeline may be a `Source` object, which acts as the entry
    point for processing content streams. Subsequent pipes can perform filtering,
    transformation, or extraction tasks.
    """
    def __init__(self, pipes: typing.List[Pipe]) -> None:
        """
        Initialize the `Pipeline` with a list of `Pipe` objects.

        This constructor sets up the pipeline by connecting each `Pipe` to the next one
        in the sequence. The final `Pipe` in the list has no next pipe.

        :param pipes: A list of `Pipe` objects representing the sequence of operations
                      in the pipeline.
        """
        ...
    
    def process(self, document_or_page: typing.Union[Document, Page]): # -> Any | None:
        """
        Process a PDF `Document` or `Page` through the pipeline.

        This method determines whether the input is a `Document` or a `Page` and processes
        the content accordingly. If the first `Pipe` in the pipeline is a `Source`, it is
        responsible for initiating the processing of content streams.

        :param document_or_page: A `Document` or `Page` object to be processed by the pipeline.
        """
        ...
    


