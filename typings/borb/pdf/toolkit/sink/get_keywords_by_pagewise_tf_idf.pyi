"""
This type stub file was generated by pyright.
"""

import typing
from borb.pdf.toolkit.sink.get_text import GetText

"""
Extracts keywords from a PDF document on a per-page basis using Term Frequency-Inverse Document Frequency (TF-IDF).

This class extends `GetText` to process text data extracted from a PDF file and compute keywords for each page
based on their importance using the TF-IDF algorithm. It excludes common stopwords to improve relevance.
"""
class GetKeywordsByPagewiseTFIDF(GetText):
    """
    Extracts keywords from a PDF document on a per-page basis using Term Frequency-Inverse Document Frequency (TF-IDF).

    This class extends `GetText` to process text data extracted from a PDF file and compute keywords for each page
    based on their importance using the TF-IDF algorithm. It excludes common stopwords to improve relevance.
    """
    ENGLISH_STOPWORDS: typing.Set[str] = ...
    def __init__(self, number_of_keywords: int = ...) -> None:
        """
        Initialize the GetKeywordsByPagewiseTFIDF class.

        This constructor sets the number of keywords to extract per page using
        the TF-IDF method. It ensures that the provided number is non-negative.

        :param number_of_keywords: The number of keywords to extract per page (default: 10).
                                   Must be a non-negative integer.
        """
        ...
    
    def get_output(self) -> typing.Any:
        """
        Retrieve the aggregated results from the pipeline.

        This method should be overridden by subclasses to provide the specific output
        collected by the `Sink`. By default, it returns `None`, indicating that no
        aggregation or processing has been implemented.

        :return: The aggregated output from the pipeline, or `None` if not implemented.
        """
        ...
    


