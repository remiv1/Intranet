"""
This type stub file was generated by pyright.
"""

import pathlib
import typing
from borb.pdf.toolkit.event import Event
from borb.pdf.toolkit.sink.sink import Sink

"""
A sink class that converts a PDF document into a GraphML representation.

The `GetDocumentAsGraphML` class serves as a sink at the end of the PDF processing pipeline
and is responsible for converting the document's structure into a GraphML file. This allows
for visualizing the PDF as a graph, where elements such as text, shapes, or images are
represented as nodes and their relationships as edges.

This conversion enables easy debugging and analysis of the PDF structure, making it useful
for identifying issues in PDF generation or processing. The resulting GraphML file can be
opened with graph editing tools for further inspection and manipulation.

This class does not modify the PDF content but simply extracts its structural relationships
for GraphML representation.
"""
GraphNodeType = ...
class GetDocumentAsGraphML(Sink):
    """
    A sink class that converts a PDF document into a GraphML representation.

    The `GetDocumentAsGraphML` class serves as a sink at the end of the PDF processing pipeline
    and is responsible for converting the document's structure into a GraphML file. This allows
    for visualizing the PDF as a graph, where elements such as text, shapes, or images are
    represented as nodes and their relationships as edges.

    This conversion enables easy debugging and analysis of the PDF structure, making it useful
    for identifying issues in PDF generation or processing. The resulting GraphML file can be
    opened with graph editing tools for further inspection and manipulation.

    This class does not modify the PDF content but simply extracts its structural relationships
    for GraphML representation.
    """
    def __init__(self, where_to: typing.Union[str, pathlib.Path]) -> None:
        """
        Initialize a `GetDocumentAsGraphML` instance.

        The `GetDocumentAsGraphML` class acts as a sink in the PDF processing pipeline, converting
        the document's structure into a GraphML representation. This constructor initializes the
        internal data structures needed to capture and organize PDF elements for graph-based analysis.

        The extracted GraphML representation enables debugging and visualization of the PDFâ€™s structure,
        facilitating the identification of relationships between elements.
        """
        ...
    
    def get_output(self) -> typing.Any:
        """
        Retrieve the aggregated results from the pipeline.

        This method should be overridden by subclasses to provide the specific output
        collected by the `Sink`. By default, it returns `None`, indicating that no
        aggregation or processing has been implemented.

        :return: The aggregated output from the pipeline, or `None` if not implemented.
        """
        ...
    
    def process(self, event: Event) -> None:
        """
        Process the given event.

        This base implementation is a no-op. Subclasses should override this method
        to provide specific processing logic.

        :param event: The event object to process.
        """
        ...
    


