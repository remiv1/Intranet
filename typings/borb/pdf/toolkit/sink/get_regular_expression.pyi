"""
This type stub file was generated by pyright.
"""

import typing
from borb.pdf.toolkit.event import Event
from borb.pdf.toolkit.sink.sink import Sink

"""
A `Sink` implementation that extracts text matching a regular expression from a PDF.

This class processes `TextEvent` objects, reconstructs textual content per page, and
applies a specified regular expression to identify matches. For each match, metadata
such as bounding boxes, font properties, and the regex match object are stored.
"""
MatchType = ...
class GetRegularExpression(Sink):
    """
    A `Sink` implementation that extracts text matching a regular expression from a PDF.

    This class processes `TextEvent` objects, reconstructs textual content per page, and
    applies a specified regular expression to identify matches. For each match, metadata
    such as bounding boxes, font properties, and the regex match object are stored.
    """
    def __init__(self, pattern: typing.Union[str, re.Pattern]) -> None:
        """
        Initialize the `GetRegularExpression` sink with a given regular expression pattern.

        This constructor sets up internal data structures to store text events and their
        corresponding matches per page. The provided pattern is compiled into a `re.Pattern`
        object if it is passed as a string.

        :param pattern: The regular expression pattern used for text extraction.
                        Can be a compiled `re.Pattern` or a string that will be compiled.
        """
        ...
    
    def get_output(self) -> typing.Any:
        """
        Retrieve the aggregated results from the pipeline.

        This method should be overridden by subclasses to provide the specific output
        collected by the `Sink`. By default, it returns `None`, indicating that no
        aggregation or processing has been implemented.

        :return: The aggregated output from the pipeline, or `None` if not implemented.
        """
        ...
    
    def process(self, event: Event) -> None:
        """
        Process the given event.

        This base implementation is a no-op. Subclasses should override this method
        to provide specific processing logic.

        :param event: The event object to process.
        """
        ...
    


