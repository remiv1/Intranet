"""
This type stub file was generated by pyright.
"""

import typing
from borb.pdf.toolkit.event import Event
from borb.pdf.toolkit.sink.sink import Sink

"""
A Sink that processes PDF rendering events to extract and track colors used in a document.

This class listens to events in the PDF processing pipeline and extracts a limited number
of unique colors based on the specified maximum threshold.
"""
class GetColors(Sink):
    """
    A Sink that processes PDF rendering events to extract and track colors used in a document.

    This class listens to events in the PDF processing pipeline and extracts a limited number
    of unique colors based on the specified maximum threshold.
    """
    def __init__(self, max_number_of_colors: int = ...) -> None:
        """
        Initialize the GetColors sink.

        This constructor sets the maximum number of colors that will be tracked
        when processing a PDF document.

        :param max_number_of_colors: The maximum number of unique colors to track (default: 64).
                                     Must be a positive integer.
        """
        ...
    
    def get_output(self) -> typing.Any:
        """
        Retrieve the aggregated results from the pipeline.

        This method should be overridden by subclasses to provide the specific output
        collected by the `Sink`. By default, it returns `None`, indicating that no
        aggregation or processing has been implemented.

        :return: The aggregated output from the pipeline, or `None` if not implemented.
        """
        ...
    
    def process(self, event: Event) -> None:
        """
        Process the given event.

        This base implementation is a no-op. Subclasses should override this method
        to provide specific processing logic.

        :param event: The event object to process.
        """
        ...
    


