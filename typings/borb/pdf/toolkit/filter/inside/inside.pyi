"""
This type stub file was generated by pyright.
"""

from borb.pdf.toolkit.event import Event
from borb.pdf.toolkit.pipe import Pipe

"""
A filter class for processing PDF page content streams, specifically targeting content that appears within a specified rectangular region on the PDF page.

The `Inside` filter identifies and processes elements located within a defined area, allowing
for selective extraction or manipulation of text, images, or graphics within that region. This
filter is useful for isolating content within specific boundaries, such as tables, headers,
footers, or highlighted sections.
"""
class Inside(Pipe):
    """
    A filter class for processing PDF page content streams, specifically targeting content that appears within a specified rectangular region on the PDF page.

    The `Inside` filter identifies and processes elements located within a defined area, allowing
    for selective extraction or manipulation of text, images, or graphics within that region. This
    filter is useful for isolating content within specific boundaries, such as tables, headers,
    footers, or highlighted sections.
    """
    def __init__(self, x: int, y: int, width: int, height: int) -> None:
        """
        Initialize the Inside filter.

        This constructor sets up the filter to capture events that correspond to content located
        inside a specific rectangular region, as defined by the provided coordinates (x, y) and
        dimensions (width, height). The filter allows subsequent event processing to focus on content
        within the defined area, enabling selective handling of content based on its position.

        :param x:       The x-coordinate of the lower-left corner of the rectangular area.
        :param y:       The y-coordinate of the lower-left corner of the rectangular area.
        :param width:   The width of the rectangular area.
        :param height:  The height of the rectangular area.
        """
        ...
    
    def process(self, event: Event) -> None:
        """
        Process the given event.

        This base implementation is a no-op. Subclasses should override this method
        to provide specific processing logic.

        :param event: The event object to process.
        """
        ...
    


