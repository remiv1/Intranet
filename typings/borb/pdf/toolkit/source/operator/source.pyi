"""
This type stub file was generated by pyright.
"""

import typing
from borb.pdf.color.color import Color
from borb.pdf.font.font import Font
from borb.pdf.page import Page
from borb.pdf.primitives import PDFType, name
from borb.pdf.toolkit.event import Event
from borb.pdf.toolkit.pipe import Pipe

"""
A generic class for processing and altering PDF page content streams.

The `Source` serves as a base class for various operations
that modify or process the content of a PDF page's content stream. It is a more
general-purpose class than filters, and is designed to support a wide range of use
cases, such as Optical Character Recognition (OCR), rendering PDF pages to images,
extracting images or text, and other content manipulations.

The class can be extended to implement specific processing behaviors, enabling the
ability to perform complex transformations on the page's content.
"""
PointType: typing.TypeAlias = typing.Tuple[float, float]
LineType: typing.TypeAlias = typing.Tuple[PointType, PointType]
ShapeType: typing.TypeAlias = typing.List[LineType]
GlyphType: typing.TypeAlias = typing.Tuple[bytes, str, float]
class Source(Pipe):
    """
    A generic class for processing and altering PDF page content streams.

    The `Source` serves as a base class for various operations
    that modify or process the content of a PDF page's content stream. It is a more
    general-purpose class than filters, and is designed to support a wide range of use
    cases, such as Optical Character Recognition (OCR), rendering PDF pages to images,
    extracting images or text, and other content manipulations.

    The class can be extended to implement specific processing behaviors, enabling the
    ability to perform complex transformations on the page's content.
    """
    def __init__(self) -> None:
        """
        Initialize a `Source` instance.

        The constructor takes a `Page` object that represents the PDF page whose content
        stream will be processed. This forms the basis for any content manipulation or
        transformation operations that will be applied to the page.

        :param p:  The `Page` object that represents the PDF page to be processed.
                   It contains the page content that will be the target of the processing.

        The `Source` class can be extended to implement specific
        processing behaviors, and the page passed to the constructor will be the subject
        of those transformations or manipulations.
        """
        ...
    
    def fill(self, fill_color: Color, shape: ShapeType, use_even_odd_rule: bool): # -> None:
        """
        Initiate the process of pushing a filling event down the pipe.

        This method starts the flow of a filling-related event down the pipeline by creating
        and passing a filling event. The event is triggered by the invocation of this method,
        which processes the given parameters to define the characteristics of the fill operation
        to be applied to the current path or shape.

        :param fill_color:       The color to be used for filling the shape or path. This determines the interior color of the defined region.
        :param shape:            The shape type of the fill operation. This defines the structure or outline of the area to be filled.
        :param use_even_odd_rule: A boolean value indicating whether to use the even-odd rule for determining the fill region.
                                  If True, the even-odd rule is used; otherwise, the nonzero winding number rule is applied.
        :return: None
        """
        ...
    
    def image(self, x: float, y: float, width: float, height: float, image: PDFType, xobject_resource: name) -> None:
        """
        Initiate the process of pushing an image event down the pipe.

        This method starts the flow of an image-related event down the pipeline by creating
        and passing an image event. The event is triggered by the invocation of this method,
        which processes the given parameters to define the characteristics of the image to
        be rendered on a page.

        :param x:                   The x-coordinate in user space where the image will be placed. This specifies the horizontal starting point of the image.
        :param y:                   The y-coordinate in user space where the image will be placed. This specifies the vertical starting point of the image.
        :param width:               The width of the image to be rendered. This controls the scaling of the image along the horizontal axis.
        :param height:              The height of the image to be rendered. This controls the scaling of the image along the vertical axis.
        :param image:               The image data in the form of a `PDFType`. This contains the image content to be displayed on the page.
        :param xobject_resource:    The name of the XObject resource associated with the image. This resource links the image content to the document.
        :return: None
        """
        ...
    
    def process(self, event: Event) -> None:
        """
        Process the given event.

        This base implementation is a no-op. Subclasses should override this method
        to provide specific processing logic.

        :param event: The event object to process.
        """
        ...
    
    def process_page(self, page: Page) -> None:
        """
        Process the content stream of a PDF page, executing operations based on the PDF operators encountered.

        This method serves as the main entry point for processing a PDF page's content stream.
        It iterates over the stream's operators and operands, invoking corresponding methods for
        each operator. Subclasses can override these operator-specific methods to implement custom
        behavior for specific operations (e.g., rendering, text extraction, or modification).

        The `process_content_stream` method provides a flexible framework for handling content
        streams, enabling extensions to define custom processing logic while leveraging this base
        implementation.

        :param page: The Page
        """
        ...
    
    def stroke(self, line_width: float, shape: ShapeType, stroke_color: Color): # -> None:
        """
        Initiate the process of pushing a stroking event down the pipe.

        This method starts the flow of a stroking-related event down the pipeline by creating
        and passing a stroking event. The event is triggered by the invocation of this method,
        which processes the given parameters to define the characteristics of the stroke to be
        applied to the current path.

        :param line_width:   The width of the stroke line. This parameter controls the thickness of the stroke applied to the path.
        :param shape:        The shape type of the stroke. This defines how the stroke's path corners and ends are rendered (e.g., round, square).
        :param stroke_color: The color of the stroke. This parameter defines the stroke's color, which will be applied based on the current graphics state.
        :return: None
        """
        ...
    
    def text(self, s: str, x: float, y: float, width: float, height: float, font: Font, font_color: Color, font_size: float): # -> None:
        """
        Initiate the process of pushing a text event down the pipe.

        This method starts the flow of an event down the pipeline by creating and passing a
        text-related event. The event is triggered by the invocation of this method, which
        processes the given parameters to define the characteristics of the text to be
        rendered on a page.

        :param s:           The text string to be displayed. This is the content that will be shown at the specified coordinates.
        :param x:           The x-coordinate in user space where the text will be placed. This specifies the horizontal starting point of the text.
        :param y:           The y-coordinate in user space where the text will be placed. This specifies the vertical starting point of the text.
        :param width:       The width of the text string to be rendered. It may influence the positioning of subsequent elements.
        :param height:      The height of the text string to be rendered, used for vertical alignment and positioning relative to other elements.
        :param font:        The font to be used for rendering the text. This defines the style and design of the characters.
        :param font_color:  The color to be used for the text. This parameter defines the textâ€™s color, which will be applied based on the current graphics state.
        :param font_size:   The size of the font to be applied to the text. This parameter determines the scale of the characters.
        :return: None
        """
        ...
    


