"""
This type stub file was generated by pyright.
"""

"""
SVG Parser.

"""
NOT_INHERITED_ATTRIBUTES = ...
COLOR_ATTRIBUTES = ...
def handle_white_spaces(string, preserve): # -> str:
    """Handle white spaces in text nodes.

    See http://www.w3.org/TR/SVG/text.html#WhiteSpace

    """
    ...

def normalize_style_declaration(name, value): # -> tuple[Any, Any]:
    """Normalize style declaration consisting of name/value pair.

    Names are always case insensitive, make all lowercase.
    Values are case insensitive in most cases. Adapt for 'specials':
        id - case sensitive identifier
        class - case sensitive identifier(s)
        font-family - case sensitive name(s)
        font - shorthand in which font-family is case sensitive
        any declaration with url in value - url is case sensitive

    """
    ...

def normalize_noop_style_declaration(value):
    """No-operation for normalization where value is case sensitive.

    This is actually the exception to the rule. Normally value will be made
    lowercase (see normalize_style_declaration above).

    """
    ...

def normalize_url_style_declaration(value):
    """Normalize style declaration, but keep URL's as-is.

    Lowercase everything except for the URL.

    """
    ...

def normalize_font_style_declaration(value): # -> str:
    """Make first part of font style declaration lowercase (case insensitive).

    Lowercase first part of declaration. Only the font name is case sensitive.
    The font name is at the end of the declaration and can be 'recognized'
    by being preceded by a size or line height. There can actually be multiple
    names. So the first part is 'calculated' by selecting everything up to and
    including the last valid token followed by a size or line height (both
    starting with a number). A valid token is either a size/length or an
    identifier.

    See http://www.w3.org/TR/css-fonts-3/#font-prop

    """
    ...

class Node(dict):
    """SVG node with dict-like properties and children."""
    def __init__(self, element, style, url_fetcher, parent=..., parent_children=..., url=..., unsafe=...) -> None:
        """Create the Node from ElementTree ``node``, with ``parent`` Node."""
        ...
    
    def fetch_url(self, url, resource_type):
        ...
    
    def text_children(self, element, trailing_space, text_root=...): # -> tuple[list[Any], bool | Any]:
        """Create children and return them."""
        ...
    
    def get_href(self): # -> None:
        ...
    


class Tree(Node):
    """SVG tree."""
    def __new__(cls, **kwargs): # -> Node | Self:
        ...
    
    def __init__(self, **kwargs) -> None:
        """Create the Tree from SVG ``text``."""
        ...
    


CASE_SENSITIVE_STYLE_METHODS = ...
