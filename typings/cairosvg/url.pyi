"""
This type stub file was generated by pyright.
"""

"""
Utils dealing with URLs.

"""
HTTP_HEADERS = ...
URL = ...
def normalize_url(url): # -> str:
    """Normalize ``url`` for underlying NT/Unix operating systems.

    The input ``url`` may look like the following:

        - C:\\Directory\\zzz.svg
        - file://C:\\Directory\\zzz.svg
        - zzz.svg

    The output ``url`` on NT systems would look like below:

        - file:///C:/Directory/zzz.svg

    """
    ...

def nt_compatible_path(path): # -> str:
    """Provide compatible NT file paths for ``os.path`` functions

    ``os.path`` expects NT paths with no ``/`` at the beginning. For
    example, ``/C:/Directory/zzz.svg`` would fail ``os.path.isfile()``,
    ``os.path.isdir()`` etc. where the expected input for `os.path`
    functions is ``/C:/Directory/zzz.svg``.

    Currently ``nt_compatible_path`` performs some basic checks and
    eliminates the unwanted ``/`` at the beginning.

    """
    ...

def fetch(url, resource_type): # -> _UrlopenRet:
    """Fetch the content of ``url``.

    ``resource_type`` is the mimetype of the resource (currently one of
    image/*, image/svg+xml, text/css).

    """
    ...

def safe_fetch(url, resource_type): # -> _UrlopenRet | Literal[b"<svg width=\"1\" height=\"1\"></svg>"]:
    """Fetch the content of ``url`` only if itâ€™s a data-URL.

    Otherwise, return an empty SVG.

    """
    ...

def parse_url(url, base=...): # -> ParseResult:
    """Parse an URL.

    The URL can be surrounded by a ``url()`` string. If ``base`` is not `None`,
    the "folder" part of it is prepended to the URL.

    """
    ...

def read_url(url, url_fetcher, resource_type):
    """Get bytes in a parsed ``url`` using ``url_fetcher``.

    If ``url_fetcher`` is None a default (no limitations) URLFetcher is used.
    """
    ...

