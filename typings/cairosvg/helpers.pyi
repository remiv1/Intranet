"""
This type stub file was generated by pyright.
"""

"""
Surface helpers.

"""
UNITS = ...
PAINT_URL = ...
PATH_LETTERS = ...
RECT = ...
class PointError(Exception):
    """Exception raised when parsing a point fails."""
    ...


def distance(x1, y1, x2, y2): # -> float:
    """Get the distance between two points."""
    ...

def paint(value): # -> tuple[None, None] | tuple[str | None, str | Any | None]:
    """Extract from value an uri and a color.

    See http://www.w3.org/TR/SVG/painting.html#SpecifyingPaint

    """
    ...

def node_format(surface, node, reference=...): # -> tuple[float | Any | Literal[0], float | Any | Literal[0], tuple[float, ...] | Any]:
    """Return ``(width, height, viewbox)`` of ``node``.

    If ``reference`` is ``True``, we can rely on surface size to resolve
    percentages.

    """
    ...

def normalize(string): # -> str:
    """Normalize a string corresponding to an array of various values."""
    ...

def point(surface, string): # -> tuple[float | Any | Literal[0], float | Any | Literal[0], Any]:
    """Return ``(x, y, trailing_text)`` from ``string``."""
    ...

def point_angle(cx, cy, px, py): # -> float:
    """Return angle between x axis and point knowing given center."""
    ...

def preserve_ratio(surface, node, width=..., height=...): # -> tuple[Any | float | int, Any | float | int, float | Any | int, float | Any | int]:
    """Manage the ratio preservation."""
    ...

def clip_marker_box(surface, node, scale_x, scale_y): # -> tuple[Any | float, Any | float, Any, Any]:
    """Get the clip ``(x, y, width, height)`` of the marker box."""
    ...

def quadratic_points(x1, y1, x2, y2, x3, y3): # -> tuple[Any, Any, Any, Any, Any, Any]:
    """Return the quadratic points to create quadratic curves."""
    ...

def rotate(x, y, angle): # -> tuple[Any, Any]:
    """Rotate a point of an angle around the origin point."""
    ...

def transform(surface, transform_string, gradient=..., transform_origin=...): # -> None:
    """Transform ``surface`` or ``gradient`` if supplied using ``string``.

    See http://www.w3.org/TR/SVG/coords.html#TransformAttribute

    """
    ...

def clip_rect(string): # -> list[str] | Any:
    """Parse the rect value of a clip."""
    ...

def rotations(node): # -> list[float] | list[Any]:
    """Retrieves the original rotations of a `text` or `tspan` node."""
    ...

def pop_rotation(node, original_rotate, rotate): # -> None:
    """Removes the rotations of a node that are already used."""
    ...

def zip_letters(xl, yl, dxl, dyl, rl, word): # -> Generator[tuple[list[Any | None], Any], None, None]:
    """Returns a list with the current letter's positions (x, y and rotation).

    E.g.: for letter 'L' with positions x = 10, y = 20 and rotation = 30:
    >>> [[10, 20, 30], 'L']

    Store the last value of each position and pop the first one in order to
    avoid setting an x,y or rotation value that have already been used.

    """
    ...

def flatten(node): # -> str:
    """Flatten the text of a node and its children."""
    ...

def size(surface, string, reference=...): # -> float | Literal[0]:
    """Replace a ``string`` with units by a float value.

    If ``reference`` is a float, it is used as reference for percentages. If it
    is ``'x'``, we use the viewport width as reference. If it is ``'y'``, we
    use the viewport height as reference. If it is ``'xy'``, we use
    ``hypot(viewport_width, viewport_height) / 2 ** .5`` as reference.

    """
    ...

