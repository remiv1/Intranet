"""
This type stub file was generated by pyright.
"""

"""
Externally defined elements managers.

This module handles clips, gradients, masks, patterns and external nodes.

"""
BLEND_OPERATORS = ...
EXTEND_OPERATORS = ...
def update_def_href(surface, def_name, def_dict, chain=...): # -> None:
    """Update the attributes of the def according to its href attribute."""
    ...

def parse_all_defs(surface, node): # -> None:
    """Recursively visit all child nodes and process definition elements."""
    ...

def parse_def(surface, node): # -> None:
    """Parse the SVG definitions."""
    ...

def gradient_or_pattern(surface, node, name, opacity): # -> bool | None:
    """Gradient or pattern color."""
    ...

def marker(surface, node): # -> None:
    """Store a marker definition."""
    ...

def mask(surface, node): # -> None:
    """Store a mask definition."""
    ...

def filter_(surface, node): # -> None:
    """Store a filter definition."""
    ...

def linear_gradient(surface, node): # -> None:
    """Store a linear gradient definition."""
    ...

def radial_gradient(surface, node): # -> None:
    """Store a radial gradient definition."""
    ...

def pattern(surface, node): # -> None:
    """Store a pattern definition."""
    ...

def clip_path(surface, node): # -> None:
    """Store a clip path definition."""
    ...

def paint_mask(surface, node, name, opacity): # -> None:
    """Paint the mask of the current surface."""
    ...

def draw_gradient(surface, node, name, opacity): # -> bool:
    """Gradients colors."""
    ...

def draw_pattern(surface, node, name, opacity): # -> bool:
    """Draw a pattern image."""
    ...

def prepare_filter(surface, node, name): # -> None:
    """Apply a filter transforming the context."""
    ...

def apply_filter_before_painting(surface, node, name): # -> None:
    """Apply a filter transforming the painting operations."""
    ...

def apply_filter_after_painting(surface, node, name): # -> None:
    """Apply a filter using the painted surface to transform the image."""
    ...

def use(surface, node): # -> None:
    """Draw the content of another SVG node."""
    ...

