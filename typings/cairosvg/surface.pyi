"""
This type stub file was generated by pyright.
"""

import cairocffi as cairo

"""
Cairo surface creators.

"""
SHAPE_ANTIALIAS = ...
TEXT_ANTIALIAS = ...
TEXT_HINT_STYLE = ...
TEXT_HINT_METRICS = ...
TAGS = ...
PATH_TAGS = ...
INVISIBLE_TAGS = ...
class Surface:
    """Abstract base class for CairoSVG surfaces.

    The ``width`` and ``height`` attributes are in device units (pixels for
    PNG, else points).

    The ``context_width`` and ``context_height`` attributes are in user units
    (i.e. in pixels), they represent the size of the active viewport.

    """
    surface_class = ...
    @classmethod
    def convert(cls, bytestring=..., *, file_obj=..., url=..., dpi=..., parent_width=..., parent_height=..., scale=..., unsafe=..., background_color=..., negate_colors=..., invert_images=..., write_to=..., output_width=..., output_height=..., **kwargs): # -> bytes | None:
        """Convert an SVG document to the format for this class.

        Specify the input by passing one of these:

        :param bytestring: The SVG source as a byte-string.
        :param file_obj: A file-like object.
        :param url: A filename.

        Give some options:

        :param dpi: The ratio between 1 inch and 1 pixel.
        :param parent_width: The width of the parent container in pixels.
        :param parent_height: The height of the parent container in pixels.
        :param scale: The ouptut scaling factor.
        :param unsafe: A boolean allowing external file access, XML entities
                       and very large files
                       (WARNING: vulnerable to XXE attacks and various DoS).

        Specifiy the output with:

        :param write_to: The filename of file-like object where to write the
                         output. If None or not provided, return a byte string.

        Only ``bytestring`` can be passed as a positional argument, other
        parameters are keyword-only.

        """
        ...
    
    def __init__(self, tree, output, dpi, parent_surface=..., parent_width=..., parent_height=..., scale=..., output_width=..., output_height=..., background_color=..., map_rgba=..., map_image=...) -> None:
        """Create the surface from a filename or a file-like object.

        The rendered content is written to ``output`` which can be a filename,
        a file-like object, ``None`` (render in memory but do not write
        anything) or the built-in ``bytes`` as a marker.

        Call the ``.finish()`` method to make sure that the output is
        actually written.

        """
        ...
    
    @property
    def points_per_pixel(self):
        """Surface resolution."""
        ...
    
    @property
    def device_units_per_user_units(self):
        """Ratio between Cairo device units and user units.

        Device units are pixels for PNG and SVG, and points for everything
        else. User units are pixels.

        """
        ...
    
    def set_context_size(self, width, height, viewbox, tree): # -> None:
        """Set the Cairo context size, set the SVG viewport size."""
        ...
    
    def finish(self): # -> None:
        """Read the surface content."""
        ...
    
    def map_color(self, string, opacity=...): # -> tuple[Literal[0], Literal[0], Literal[0], Literal[0]] | tuple[float, float, float, int] | tuple[float, float, float, float] | tuple[*tuple[float, ...], int] | tuple[Literal[0], Literal[0], Literal[0], Literal[1]]:
        """Parse a color ``string`` and apply ``map_rgba`` function to it."""
        ...
    
    def draw(self, node):
        """Draw ``node`` and its children."""
        ...
    


class PDFSurface(Surface):
    """A surface that writes in PDF format."""
    surface_class = cairo.PDFSurface


class PSSurface(Surface):
    """A surface that writes in PostScript format."""
    surface_class = cairo.PSSurface


class EPSSurface(Surface):
    """A surface that writes in Encapsulated PostScript format."""
    ...


class PNGSurface(Surface):
    """A surface that writes in PNG format."""
    device_units_per_user_units = ...
    def finish(self): # -> None:
        """Read the PNG surface content."""
        ...
    


class SVGSurface(Surface):
    """A surface that writes in SVG format.

    It may seem pointless to render SVG to SVG, but this can be used
    with ``output=None`` to get a vector-based single page cairo surface.

    """
    device_units_per_user_units = ...
    surface_class = cairo.SVGSurface


def parse_font(value): # -> dict[str, str]:
    ...

