#!/usr/bin/env python3
"""
Script de test avanc√© pour la classe SignedDocumentCreator avec SVG et certificats s√©curis√©s.
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'app'))

def test_advanced_imports():
    """Test les imports avanc√©s avec SVG et cryptographie."""
    print("üîç Test des imports avanc√©s...")
    
    try:
        # Test borb
        from borb.pdf import Document, PDF
        print("‚úÖ borb import√© avec succ√®s")
        
        # Test pillow
        from PIL import Image as PILImage
        print("‚úÖ Pillow (PIL) import√© avec succ√®s")
        
        # Test cairosvg
        import cairosvg
        print("‚úÖ cairosvg import√© avec succ√®s")
        
        # Test cryptography
        from cryptography.hazmat.primitives import hashes
        from cryptography.hazmat.primitives.asymmetric import rsa
        print("‚úÖ cryptography import√© avec succ√®s")
        
        # Test de notre classe
        from bp_signature import SignedDocumentCreator, SecureCertificateManager
        print("‚úÖ SignedDocumentCreator et SecureCertificateManager import√©s avec succ√®s")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import : {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur : {e}")
        return False

def test_certificate_creation():
    """Test la cr√©ation de certificats s√©curis√©s."""
    print("\nüîê Test de cr√©ation de certificats s√©curis√©s...")
    
    try:
        from bp_signature import SecureCertificateManager
        
        # Donn√©es de test factices
        test_signatures = []
        test_document_hash = "abc123def456"
        test_signatories = []
        
        # Cr√©er un certificat s√©curis√©
        print("   G√©n√©ration d'un certificat de test...")
        cert = SecureCertificateManager.create_secure_certificate(
            signatures=test_signatures,
            document_hash=test_document_hash,
            signatories=test_signatories
        )
        
        print("‚úÖ Certificat s√©curis√© cr√©√© avec succ√®s")
        print(f"   ID du certificat : {cert['certificate']['certificate_id']}")
        print(f"   Algorithme : {cert['algorithm']}")
        
        # V√©rifier le certificat
        print("   V√©rification du certificat...")
        is_valid = SecureCertificateManager.verify_certificate(cert)
        
        if is_valid:
            print("‚úÖ Certificat v√©rifi√© avec succ√®s")
            return True
        else:
            print("‚ùå √âchec de la v√©rification du certificat")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test de certificat : {e}")
        return False

def test_svg_conversion():
    """Test la conversion SVG."""
    print("\nüé® Test de conversion SVG...")
    
    try:
        from bp_signature import SignedDocumentCreator
        
        # SVG de test simple
        test_svg = '''<svg width="100" height="50" xmlns="http://www.w3.org/2000/svg">
            <text x="10" y="30" fill="blue">Test Signature</text>
        </svg>'''
        
        # Cr√©er une instance pour acc√©der √† la m√©thode
        creator = SignedDocumentCreator(
            id_document=1,
            hash_document="test",
            current_user_id=1
        )
        
        # Tester la conversion
        print("   Conversion du SVG de test...")
        image = creator._convert_svg_to_image(test_svg, 100, 50)
        
        if image:
            print("‚úÖ SVG converti en image avec succ√®s")
            print(f"   Taille de l'image : {image.size}")
            return True
        else:
            print("‚ö†Ô∏è  Conversion SVG √©chou√©e (d√©pendances manquantes ?)")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test SVG : {e}")
        return False

def main():
    """Fonction principale de test."""
    print("=== Test complet de SignedDocumentCreator avec SVG et certificats s√©curis√©s ===\n")
    
    tests_results = []
    
    # Test 1: Imports
    print("1. Test des imports avanc√©s :")
    tests_results.append(test_advanced_imports())
    
    # Test 2: Certificats s√©curis√©s
    print("\n2. Test des certificats s√©curis√©s :")
    tests_results.append(test_certificate_creation())
    
    # Test 3: Conversion SVG
    print("\n3. Test de conversion SVG :")
    tests_results.append(test_svg_conversion())
    
    # R√©sum√©
    print("\n" + "="*60)
    passed = sum(tests_results)
    total = len(tests_results)
    
    if passed == total:
        print(f"üéâ Tous les tests sont pass√©s ! ({passed}/{total})")
        print("\n‚ú® La classe SignedDocumentCreator est pr√™te avec :")
        print("   ‚Ä¢ Int√©gration SVG directe avec borb")
        print("   ‚Ä¢ Certificats cryptographiquement s√©curis√©s")
        print("   ‚Ä¢ V√©rification d'int√©grit√© RSA-SHA256")
        print("   ‚Ä¢ Fallback gracieux en cas d'erreur")
    else:
        print(f"‚ö†Ô∏è  {passed}/{total} tests pass√©s")
        print("\nV√©rifiez que toutes les d√©pendances sont install√©es :")
        print("   pip install pillow cairosvg cryptography")

if __name__ == "__main__":
    main()