name: Tests CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: debian-bookworm
    
    strategy:
      matrix:
        python-version: [3.12]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmariadb-dev pkg-config
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-flask pytest-cov pytest-mock
    
    - name: Create test environment variables
      run: |
        echo "TESTING=true" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
    
    - name: Run linting
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
    
    - name: Run tests with coverage
      run: |
        cd test/
        python -m pytest -v --cov=../app --cov-report=term-missing --cov-report=xml
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./test/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    runs-on: debian-bookworm
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run security scan with bandit
      run: |
        pip install bandit
        bandit -r app/ -f json -o bandit-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: bandit-report.json

  dependency-check:
    runs-on: debian-bookworm
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety
    
    - name: Check for security vulnerabilities
      run: |
        pip install -r requirements.txt
        safety check --json --output safety-report.json || true
    
    - name: Upload dependency check results
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-results
        path: safety-report.json
